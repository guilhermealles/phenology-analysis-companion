# -*- coding: utf-8 -*-
# -*- mode: org -*-

#+TITLE: Companion Scripts
#+AUTHOR: Alles et al.

#+STARTUP: overview indent

* Scripts
:PROPERTIES:
:header-args: :tangle-mode (identity #o755)
:END:

This directory contains all the scripts needed to reproduce the
Figures shown in the paper *Measuring Phenology Uncertainty with Large
Scale Image Processing*. For all the scripts below, you may want to
customize the path to ~Rscript~.

** Figures Overview


| Section | Figure | Description                             | Status  |
|---------+--------+-----------------------------------------+---------|
|       2 |      1 | Mean gcc and rcc                        | Done    |
|---------+--------+-----------------------------------------+---------|
|       3 |      2 | PhenoVis CPM                            | Done    |
|---------+--------+-----------------------------------------+---------|
|       4 |      4 | CPM Representation                      | Pending |
|       4 |      5 | CPMs with multiple metrics              | Done    |
|       4 |      6 | CPM with the Gcc_Mean                   | Done    |
|       4 | 7(a,b) | Merged percentage maps                  | Done    |
|       4 |      8 | Uncertainty level with CPM              | Done    |
|---------+--------+-----------------------------------------+---------|
|       5 |     10 | CPMs for the AHS dataset                | Done    |
|       5 |     12 | MTK Weights                             | Done    |
|       5 |     13 | Hourly CPMs for MTK                     | Done    |
|       5 |     14 | Merged CPM for MTK                      | Done    |
|       5 |     15 | Moving window weights                   | Done    |
|       5 |     16 | Merged CPM with 3 days                  | Done    |
|       5 |     17 | Averaged CPMs for multiple window sizes | Done    |
|       5 |     18 | Weights for multi-year averaging        | Done    |
|       5 |     19 | Merged CPM for multiple years           | Done    |
|       5 |     20 | Weighted CPM with uncertainty level     | Done    |
|       5 |     21 | Hourly CPMs for TKY-2011, day 145       | Done    |
|       5 |     22 | Hourly CPMs for TKY-2011, day 324       | Done    |
|       5 |     23 | Weighted CPM with uncertainty level     | Done    |
|       5 |     24 | Histogram of Gcc values                 | Done    |
|       5 |     25 | Hourly CPMs for TKY-2011, day 162       | Done    |
|       5 |     26 | Performance analysis                    | Done    |
|---------+--------+-----------------------------------------+---------|

** Section 2
*** Figure 1 (mean-gcc-rcc)

#+BEGIN_SRC R :tangle section-2/tky-2006-mean-gcc-rcc.R
#!/usr/bin/Rscript
library(tidyverse)

add_plot_metadata <- function (data) {
  data %>% 
  mutate(Filename = gsub('.*/', '', Name)) %>%
  mutate(Filename = gsub('.jpg', '', Filename)) %>%
  mutate(Filename = gsub('dc_', '', Filename)) %>%
  separate(Filename, sep='__', into=c('Filename', 'Camera_ID')) %>%
  separate(Filename, sep='_', into=c('Year', 'Day', 'Time', 'Dataset')) %>%
  mutate(Time = gsub('\\+.*', '', Time)) %>%
  mutate(Hour = as.integer(substr(Time, 1, 2))) %>%
  mutate(Minute = as.integer(substr(Time, 3, 4))) %>%
  mutate(Year = as.integer(Year)) %>%
  mutate(Day = as.integer(Day)) %>%
  select(-Time)
}

meanGcc <- read.csv('../../data/tky-2006-mean-gcc.csv');
meanRcc <- read.csv('../../data/tky-2006-mean-rcc.csv') %>% select(MeanRcc)

values <- cbind(meanGcc, meanRcc) %>% as_tibble %>%
  add_plot_metadata

p <- values %>%
  ggplot() +
  geom_point(aes(x = Day, y = MeanGcc, col='Gcc'), size=0.5) +
  geom_point(aes(x = Day, y = MeanRcc, col='Rcc'), size=0.5) + 
  scale_colour_manual(values=c(rgb(0, 0.75, 0),
                               rgb(0.75, 0, 0)),
                      labels=c(expression(g[cc]),
                               expression(r[cc]))
                      ) +
  ylim(0.25, 0.525) +
  xlab('Day of the year') +
  ylab('Mean coefficient') +
  theme_bw(base_size=12) +
  theme(
    plot.margin = unit(c(0,0,0,0), "cm"),
    legend.spacing = unit(0, "mm"),
    legend.justification = "left",
    legend.box.spacing = unit(0, "pt"),
    legend.box.margin = margin(0,0,0,0),
    legend.title = element_blank()
  )

df.redLines <- tribble(~X,50,165,295,345) %>% mutate(Y=1)

p2 <- p +
  geom_vline(
    data=df.redLines,
    aes(xintercept=X),
    size=0.75,
    color="red"
  ) +
  geom_label(
    data=df.redLines, aes(x=X, y=0.5125, label = X), size=2.75
  )

ggsave('tky-2006-mean-gcc-rcc.pdf', plot = p2, width = 8, height = 2.5)
#+END_SRC
** Section 3
*** Figure 2 (phenovis CPM)

#+BEGIN_SRC R :tangle section-3/phenovis_cpm.R
#!/usr/bin/Rscript
library(tidyverse)
DATAFILE <- "../../data/dc_TKY_y18_n_2015_grain100_masked.csv"

lowLimit <- 30
highLimit <- 50

data <- read_csv(
  DATAFILE,
  col_types=cols(
    .default = col_double(),
    database = col_character(),
    sequence = col_character()
  )
) %>%
  gather(variable, value, -database, -sequence, -year) %>%
  mutate(sequence = as.integer(sequence)) %>%
  mutate(variable = as.integer(gsub("X", "", variable))) %>%
  mutate(value = as.integer(value))

paletteFilename <- '../../data/phenovis.palette'
palette <- toupper(
  read.csv(
    paletteFilename,
    comment.char="?",
    header=FALSE
  )$V1
)

p <- data %>%
  filter(variable >= lowLimit, variable < highLimit) %>%
  mutate(variable = variable/100) %>%
  group_by(database, year, sequence) %>%
  arrange(variable) %>%
  mutate(Y.max = cumsum(value)/sum(value)) %>%
  mutate(Y.min = (Y.max - value/sum(value))) %>%
  ungroup %>%
  ggplot(aes(fill=as.factor(variable))) +
    geom_rect(
      aes(
        xmin=sequence,
        xmax=sequence+1,
        ymin=Y.min,
        ymax=Y.max
      )
    ) +
    ylim(0,NA) +
    theme_bw() +
    scale_fill_manual(values=palette) +
    guides(
      fill = guide_legend(
        title = expression(g[cc]),
        title.position = "top",
        ncol = 1
      )
    ) +
    xlab("DOY") +
    coord_flip() +
    scale_x_reverse(expand=c(0,0)) +
    scale_y_continuous(expand=c(0,0)) +
    theme_bw(base_size=12) +
    theme(
      plot.margin = unit(c(0,0,0,0), "cm"),
      legend.spacing = unit(1, "mm"),
      panel.grid = element_blank(),
      legend.box.spacing = unit(0, "pt"),
      legend.box.margin = margin(0,0,0,0)
    )

ggsave('./phenovis_cpm.pdf', plot = p, width = 7, height = 6)
#+END_SRC

#+RESULTS:

** Section 4
*** Figure 4 (tky-2006-gcc-mean)
#+BEGIN_SRC R :tangle section-4/tky-2006-gcc-mean.R
#!/usr/bin/Rscript
library(tidyverse)
library(colorspace)

get_col_types <- function() {
  cols(
    Dataset = col_character(),
    Camera_ID = col_character(),
    Year = col_integer(),
    Day = col_integer(),
    Hour = col_integer(),
    Minute = col_integer(),
    Metric_Type = col_character(),
    Considered_Pixels = col_integer(),
    HSV_Bin = col_integer(),
    HSV_H = col_double(),
    HSV_SMean = col_double(),
    HSV_VMean = col_double(),
    HSV_SMode = col_double(),
    HSV_VMode = col_double(),
    Gcc_Bin = col_integer(),
    Gcc_Value = col_double(),
    Gcc_Mean_R = col_double(),
    Gcc_Mean_G = col_double(),
    Gcc_Mean_B = col_double()
  )
}

get_theme <- function(base_size = 14) {
  theme_bw(base_size = base_size) +
  theme(
    plot.margin = unit(c(0,0,0,0), "cm"),
    legend.spacing = unit(0, "mm"),
    panel.grid = element_blank(),
    legend.position = "none",
    legend.justification = "left",
    legend.box.spacing = unit(0, "pt"),
    legend.box.margin = margin(0,0,0,0),
    legend.title = element_blank(),
    axis.title.y = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )
}

histogramsPath <- '../../data/tky-partial.csv.gz'
data <- read_csv(
  histogramsPath,
  col_types=get_col_types()
) %>%
  filter(Year == 2006) %>%
  select(-Dataset, -Camera_ID, -Hour, -Minute, -Considered_Pixels) %>%
  mutate(
    Color.Code.H = hex(HSV(HSV_Bin, 1, 1)),
    Color.Code.Mean = hex(HSV(HSV_Bin, HSV_SMean, HSV_VMean)),
    Color.Code.Mode = hex(HSV(HSV_Bin, HSV_SMode, HSV_VMode)),
    Color.Code.Gcc = hex(RGB(Gcc_Mean_R, Gcc_Mean_G, Gcc_Mean_B))
  ) %>% 
  select(
    -HSV_SMean, -HSV_VMean,
    -HSV_SMode, -HSV_VMode,
    -Gcc_Mean_R, -Gcc_Mean_G, -Gcc_Mean_B
  ) %>%
  mutate(
    Bin = case_when(
      Metric_Type == 'HSV' ~ HSV_Bin,
      Metric_Type == 'Gcc' ~ Gcc_Bin
    ),
    Bin_Value = as.integer(case_when(
      Metric_Type == 'HSV' ~ HSV_H,
      Metric_Type == 'Gcc' ~ Gcc_Value
    ))
  ) %>%
  select(-HSV_Bin, -HSV_H, -Gcc_Bin, -Gcc_Value) %>%
  select(Year, Day, Metric_Type, Bin, Bin_Value, everything()) %>%
  gather(Style, Color, -Year, -Day, -Metric_Type, -Bin, -Bin_Value) %>%
  mutate(Style = gsub('Color.Code.', '', Style)) %>%
  filter(!(Metric_Type == 'Gcc' & Style %in% c('H', 'Mean', 'Mode'))) %>%
  filter(!(Metric_Type == 'HSV' & Style == 'Gcc')) %>%
  mutate(Key = paste(Year, Day, Bin, Style, sep='_')) %>%
  mutate(Key = factor(Key, levels=Key)) %>%
  arrange(Style, Year, Day, Bin) %>%
  group_by(Style, Year, Day) %>%
  arrange(Bin) %>%
  filter(Bin_Value != 0) %>%
  mutate(
    Y.min = cumsum(Bin_Value) - Bin_Value,
    Y.max = cumsum(Bin_Value)
  ) %>%
  ungroup %>%
  arrange(Style, Year, Day, Bin) %>%
  select(Style, Year, Day, Bin, everything())

palette <- data %>% pull(Color)
names(palette) <- data %>% pull(Key)

partial_plot <- data %>%
  filter(Style == 'Gcc') %>%
  mutate(Style = 'Gcc_Mean') %>%
  ggplot() +
    scale_fill_manual(values=palette) +
    geom_rect(
      aes(xmin=Day, xmax=Day+1, ymin=Y.min, ymax=Y.max, fill=Key)
    ) +
    get_theme(base_size = 12) +
    xlab('DOY')

df.rl <- tribble(~X, 90, 130, 220, 300, 340) %>%
  mutate(Y=1200000)

p <- partial_plot +
    geom_vline(data=df.rl, aes(xintercept=X), size=1, color="red") +
    geom_label(data=df.rl, aes(x=X, y=Y, label = X), size=3)

ggsave('./tky-2006-gcc-mean.pdf', plot=p, width=12, height=4)
  
#+END_SRC

*** Figure 5 (facets-hsv)

#+BEGIN_SRC R :tangle section-4/facets-hsv.R
#!/usr/bin/Rscript
library(colorspace)
library(tidyverse)

get_col_types <- function() {
  cols(
    Dataset = col_character(),
    Camera_ID = col_character(),
    Year = col_integer(),
    Day = col_integer(),
    Hour = col_integer(),
    Minute = col_integer(),
    Metric_Type = col_character(),
    Considered_Pixels = col_integer(),
    HSV_Bin = col_integer(),
    HSV_H = col_double(),
    HSV_SMean = col_double(),
    HSV_VMean = col_double(),
    HSV_SMode = col_double(),
    HSV_VMode = col_double(),
    Gcc_Bin = col_integer(),
    Gcc_Value = col_double(),
    Gcc_Mean_R = col_double(),
    Gcc_Mean_G = col_double(),
    Gcc_Mean_B = col_double()
  )
}

histogramsPath <- '../../data/tky-partial.csv.gz'
data <- read_csv(
  histogramsPath,
  col_types=get_col_types()
) %>%
  filter(Year == 2006) %>%
  filter(Metric_Type == 'HSV') %>%
  select(-contains('Gcc')) %>%
  select(-Year, -Dataset, -Camera_ID, -Hour, -Minute) %>%
  select(-Metric_Type) %>%
  mutate(
    Color.Code.H = hex(HSV(HSV_Bin, 1, 1)),
    Color.Code.Mean = hex(HSV(HSV_Bin, HSV_SMean, HSV_VMean)),
    Color.Code.Mode = hex(HSV(HSV_Bin, HSV_SMode, HSV_VMode))
  ) %>%
  gather(Variable, Value, -contains("HSV"), -Day, -Considered_Pixels) %>%
  mutate(Style = gsub("Color.Code.", "", Variable)) %>%
  select(-Considered_Pixels, -contains("Mean"), -contains("Mode"), -Variable) %>%
  arrange(Style, Day, HSV_Bin) %>%
  mutate(Key = paste(Style, Day, HSV_Bin, sep="_")) %>%
  mutate(Key = factor(Key, levels=Key)) %>%
  rename(Bin = HSV_Bin) %>%
  rename(Color = Value) %>%
  group_by(Style, Day) %>%
  arrange(Bin) %>%
  filter(HSV_H != 0) %>%
  mutate(
    Y.min = cumsum(HSV_H) - HSV_H,
    Y.max = cumsum(HSV_H)
  ) %>%
  ungroup %>%
  arrange(Style, Day, Bin) %>%
  select(Style, Day, Bin, everything())

data.palette <- data %>%
  select(Key, Color)

palette <- data.palette$Color
names(palette) <- data.palette$Key

p <- data %>%
  mutate(Style = paste0('HSV_', Style)) %>%
  ggplot(aes(
    xmin=Day,
    xmax=Day+1,
    ymin=Y.min,
    ymax=Y.max,
    fill=Key
  )) +
    scale_fill_manual(values=palette) +
    geom_rect() +
    theme_bw(base_size=12) +
    theme(
      plot.margin = unit(c(0,0,0,0), "cm"),
      legend.spacing = unit(0, "mm"),
      panel.grid = element_blank(),
      legend.position = "none",
      legend.justification = "left",
      legend.box.spacing = unit(0, "pt"),
      legend.box.margin = margin(0,0,0,0),
      legend.title = element_blank(),
      axis.title.y = element_blank(),
      axis.text.y = element_blank(),
      axis.ticks.y = element_blank()
    ) +
    guides(fill = guide_legend(nrow = 1)) +
    xlab('DOY') +
    facet_wrap(~Style, ncol=1)

ggsave('./facets-hsv.pdf', plot=p, width=6.5, height= 2.5)
#+END_SRC

*** Figure 6 (tky-2006-gcc_mean)

#+BEGIN_SRC R :tangle section-4/tky-2006-gcc_mean.R
#!/usr/bin/Rscript
library(tidyverse)
library(colorspace)

get_col_types <- function() {
  cols(
    Dataset = col_character(),
    Camera_ID = col_character(),
    Year = col_integer(),
    Day = col_integer(),
    Hour = col_integer(),
    Minute = col_integer(),
    Metric_Type = col_character(),
    Considered_Pixels = col_integer(),
    HSV_Bin = col_integer(),
    HSV_H = col_double(),
    HSV_SMean = col_double(),
    HSV_VMean = col_double(),
    HSV_SMode = col_double(),
    HSV_VMode = col_double(),
    Gcc_Bin = col_integer(),
    Gcc_Value = col_double(),
    Gcc_Mean_R = col_double(),
    Gcc_Mean_G = col_double(),
    Gcc_Mean_B = col_double()
  )
}

get_theme <- function(base_size = 14) {
  theme_bw(base_size = base_size) +
  theme(
    plot.margin = unit(c(0,0,0,0), "cm"),
    legend.spacing = unit(0, "mm"),
    panel.grid = element_blank(),
    legend.position = "none",
    legend.justification = "left",
    legend.box.spacing = unit(0, "pt"),
    legend.box.margin = margin(0,0,0,0),
    legend.title = element_blank(),
    axis.title.y = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )
}

histogramsPath <- '../../data/tky-partial.csv.gz'
data <- read_csv(
  histogramsPath,
  col_types=get_col_types()
) %>%
  filter(Year == 2006) %>%
  select(-Dataset, -Camera_ID, -Hour, -Minute, -Considered_Pixels) %>%
  mutate(
    Color.Code.H = hex(HSV(HSV_Bin, 1, 1)),
    Color.Code.Mean = hex(HSV(HSV_Bin, HSV_SMean, HSV_VMean)),
    Color.Code.Mode = hex(HSV(HSV_Bin, HSV_SMode, HSV_VMode)),
    Color.Code.Gcc = hex(RGB(Gcc_Mean_R, Gcc_Mean_G, Gcc_Mean_B))
  ) %>% 
  select(
    -HSV_SMean, -HSV_VMean,
    -HSV_SMode, -HSV_VMode,
    -Gcc_Mean_R, -Gcc_Mean_G, -Gcc_Mean_B
  ) %>%
  mutate(
    Bin = case_when(
      Metric_Type == 'HSV' ~ HSV_Bin,
      Metric_Type == 'Gcc' ~ Gcc_Bin
    ),
    Bin_Value = as.integer(case_when(
      Metric_Type == 'HSV' ~ HSV_H,
      Metric_Type == 'Gcc' ~ Gcc_Value
    ))
  ) %>%
  select(-HSV_Bin, -HSV_H, -Gcc_Bin, -Gcc_Value) %>%
  select(Year, Day, Metric_Type, Bin, Bin_Value, everything()) %>%
  gather(Style, Color, -Year, -Day, -Metric_Type, -Bin, -Bin_Value) %>%
  mutate(Style = gsub('Color.Code.', '', Style)) %>%
  filter(!(Metric_Type == 'Gcc' & Style %in% c('H', 'Mean', 'Mode'))) %>%
  filter(!(Metric_Type == 'HSV' & Style == 'Gcc')) %>%
  mutate(Key = paste(Year, Day, Bin, Style, sep='_')) %>%
  mutate(Key = factor(Key, levels=Key)) %>%
  arrange(Style, Year, Day, Bin) %>%
  group_by(Style, Year, Day) %>%
  arrange(Bin) %>%
  filter(Bin_Value != 0) %>%
  mutate(
    Y.min = cumsum(Bin_Value) - Bin_Value,
    Y.max = cumsum(Bin_Value)
  ) %>%
  ungroup %>%
  arrange(Style, Year, Day, Bin) %>%
  select(Style, Year, Day, Bin, everything())

palette <- data %>% pull(Color)
names(palette) <- data %>% pull(Key)

p <- data %>%
  filter(Style == 'Gcc') %>%
  mutate(Style = 'Gcc_Mean') %>%
  ggplot() +
    scale_fill_manual(values=palette) +
    geom_rect(
      aes(xmin=Day, xmax=Day+1, ymin=Y.min, ymax=Y.max, fill=Key)
    ) +
    get_theme(base_size = 18) +
    xlab('DOY') +
    facet_grid(~Style)

ggsave('./tky-2006-gcc_mean.pdf', plot=p, width=12, height=2)

#+END_SRC
*** Figure 7 (merged-cpms)
The following script generates two figures, used as sugfigures in the
paper.

#+BEGIN_SRC R :tangle section-4/mtk-2016-day360.R
#!/usr/bin/Rscript
library(tidyverse)
library(colorspace)

get_col_types <- function() {
  cols(
    Dataset = col_character(),
    Camera_ID = col_character(),
    Year = col_integer(),
    Day = col_integer(),
    Hour = col_integer(),
    Minute = col_integer(),
    Metric_Type = col_character(),
    Considered_Pixels = col_integer(),
    HSV_Bin = col_integer(),
    HSV_H = col_double(),
    HSV_SMean = col_double(),
    HSV_VMean = col_double(),
    HSV_SMode = col_double(),
    HSV_VMode = col_double(),
    Gcc_Bin = col_integer(),
    Gcc_Value = col_double(),
    Gcc_Mean_R = col_double(),
    Gcc_Mean_G = col_double(),
    Gcc_Mean_B = col_double()
  )
}

get_theme <- function(base_size = 14) {
  theme_bw(base_size = base_size) +
  theme(
    plot.margin = unit(c(0,0,0,0), "cm"),
    legend.spacing = unit(0, "mm"),
    panel.grid = element_blank(),
    legend.position = "none",
    legend.justification = "left",
    legend.box.spacing = unit(0, "pt"),
    legend.box.margin = margin(0,0,0,0),
    legend.title = element_blank(),
    axis.title.y = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )
}

df.weights <- tibble(
  Hour = c(9, 10, 11, 12, 13, 14, 15),
  Weight = c(0.05, 0.05, 0.1, 0.3, 0.3, 0.15, 0.05)
)

relevant_hours <- df.weights %>% filter(Weight != 0) %>% pull(Hour)

data <- read_csv(
  file = '../../data/mtk.csv.gz',
  col_types = get_col_types()
) %>%
  filter(Year == 2016) %>%
  filter(Metric_Type == 'HSV') %>% 
  select(-contains('gcc')) %>%
  filter(Hour %in% 9:17) %>%
  filter(Hour %in% relevant_hours) %>%
  group_by(Year, Day, Hour, HSV_Bin) %>%
  slice(1) %>%
  ungroup %>%
  left_join(df.weights, by=c('Hour'))

# Generate hourly percentage maps (Figure 7a)

hourly_maps <- data %>%
  filter(Day == 350) %>%
  filter(Hour %in% df.weights$Hour) %>%
  select(-Weight) %>%
  filter(Metric_Type == 'HSV') %>%
  select(-contains('Gcc')) %>%
  select(-Dataset, -Camera_ID, -Year, -Metric_Type) %>%
  # Process data
  mutate(
    Color.Code.H = hex(HSV(HSV_Bin, 1, 1)),
    Color.Code.Mean = hex(HSV(HSV_Bin, HSV_SMean, HSV_VMean)),
    Color.Code.Mode = hex(HSV(HSV_Bin, HSV_SMode, HSV_VMode))
  ) %>%
  # Make it tidy
  gather(Variable, Value, -contains('HSV'), -Day, -Hour, -Considered_Pixels) %>%
  # Add style and key
  mutate(Style = gsub('Color.Code.', '', Variable)) %>%
  mutate(Key = paste(Style, Hour, Day, HSV_Bin, sep='_')) %>%
  mutate(Key = factor(Key, levels=Key)) %>%
  # Cleanup
  select(-Considered_Pixels, -contains('Mean'), -contains('Mode'), -Variable) %>%
  arrange(Style, Hour, Day, HSV_Bin) %>%
  # Prepare for plot, calculate cumsums
  rename(Bin = HSV_Bin) %>%
  rename(Color = Value) %>%
  group_by(Style, Hour, Day) %>%
  arrange(Bin) %>%
  filter(HSV_H != 0) %>%
  mutate(
    Y.min = cumsum(HSV_H) - HSV_H,
    Y.max = cumsum(HSV_H)
  ) %>%
  ungroup %>%
  arrange(Style, Hour, Day, Bin) %>%
  select(Style, Hour, Day, Bin, everything())

hourly_palette <- hourly_maps %>% pull(Color)
names(hourly_palette) <- hourly_maps %>% pull(Key)

p <- hourly_maps %>%
  filter(Style == 'H') %>%
  mutate(Fct = case_when(
    Hour == 9 ~ 'Hour 09',
    TRUE ~ paste0('Hour ', Hour)
  )) %>%
  ggplot() +
    scale_fill_manual(values=hourly_palette) +
    geom_rect(
      aes(xmin=Day, xmax=Day+1, ymin=Y.min, ymax=Y.max, fill=Key)
    ) +
    get_theme(base_size = 18) +
    theme(
      strip.text.y = element_blank(),
      panel.spacing = unit(0, 'mm'),
      axis.text.x = element_blank(),
      axis.ticks.x = element_blank()
    ) +
    xlab('Day 350') +
    facet_grid(Style ~ Fct)

ggsave('./mtk-2016-day350-hourly.pdf', plot=p, width=7, height=7)

# Calculate weights to generate weighted percentage map (Figure 7b)

weighted_map <- data %>%
  mutate(HSV_H = Weight * HSV_H) %>%
  mutate(HSV_SMean = Weight * HSV_SMean) %>%
  mutate(HSV_VMean = Weight * HSV_VMean) %>%
  mutate(HSV_SMode = Weight * HSV_SMode) %>%
  mutate(HSV_VMode = Weight * HSV_VMode) %>%
  group_by(Day, HSV_Bin, Considered_Pixels) %>%
  summarize(
    HSV_H = as.integer(sum(HSV_H)),
    HSV_SMean = sum(HSV_SMean, na.rm = TRUE),
    HSV_VMean = sum(HSV_VMean, na.rm = TRUE),
    HSV_SMode = sum(HSV_SMode, na.rm = TRUE),
    HSV_VMode = sum(HSV_VMode, na.rm = TRUE)
  ) %>%
  ungroup %>%
  filter(Day == 350) %>%
  mutate(
    Color.Code.H = hex(HSV(HSV_Bin, 1, 1)),
    Color.Code.Mean = hex(HSV(HSV_Bin, HSV_SMean, HSV_VMean)),
    Color.Code.Mode = hex(HSV(HSV_Bin, HSV_SMode, HSV_VMode))
  ) %>%
  # Make it tidy
  gather(Variable, Value, -contains('HSV'), -Day, -Considered_Pixels) %>%
  # Add style and key
  mutate(Style = gsub('Color.Code.', '', Variable)) %>%
  mutate(Key = paste(Style, Day, HSV_Bin, sep='_')) %>%
  mutate(Key = factor(Key, levels=Key)) %>%
  # Cleanup
  select(-Considered_Pixels, -contains('Mean'), -contains('Mode'), -Variable) %>%
  arrange(Style, Day, HSV_Bin) %>%
  # Prepare for plot, calculate cumsums
  rename(Bin = HSV_Bin) %>%
  rename(Color = Value) %>%
  group_by(Style, Day) %>%
  arrange(Bin) %>%
  filter(HSV_H != 0) %>%
  mutate(
    Y.min = cumsum(HSV_H) - HSV_H,
    Y.max = cumsum(HSV_H)
  ) %>%
  ungroup %>%
  arrange(Style, Day, Bin) %>%
  select(Style, Day, Bin, everything())

weighted_palette <- weighted_map %>% pull(Color)
names(weighted_palette) <- weighted_map %>% pull(Key)

p2 <- weighted_map %>%
  filter(Style == 'H') %>%
  mutate(Fct = 'Weighted') %>%
  ggplot() +
    scale_fill_manual(values=weighted_palette) +
    geom_rect(
      aes(xmin=Day, xmax=Day+1, ymin=Y.min, ymax=Y.max, fill=Key)
    ) +
    get_theme(base_size = 18) +
    theme(
      strip.text.y = element_blank(),
      panel.spacing = unit(0, 'mm'),
      axis.text.x = element_blank(),
      axis.ticks.x = element_blank()
    ) +
    xlab('Day 350') +
    facet_grid(Style ~ Fct)

ggsave('./mtk-2016-day350-weighted.pdf', plot=p2, width=1, height=7)
#+END_SRC
*** Figure 8 (mtk-2016-weighted-hsv-Q)

#+BEGIN_SRC R :tangle section-4/mtk-2016-weighted-hsv-Q.R
#!/usr/bin/Rscript
library(tidyverse)
library(colorspace)
library(cowplot)

get_col_types <- function() {
  cols(
    Dataset = col_character(),
    Camera_ID = col_character(),
    Year = col_integer(),
    Day = col_integer(),
    Hour = col_integer(),
    Minute = col_integer(),
    Metric_Type = col_character(),
    Considered_Pixels = col_integer(),
    HSV_Bin = col_integer(),
    HSV_H = col_double(),
    HSV_SMean = col_double(),
    HSV_VMean = col_double(),
    HSV_SMode = col_double(),
    HSV_VMode = col_double(),
    Gcc_Bin = col_integer(),
    Gcc_Value = col_double(),
    Gcc_Mean_R = col_double(),
    Gcc_Mean_G = col_double(),
    Gcc_Mean_B = col_double()
  )
}

get_theme <- function(base_size = 14) {
  theme_bw(base_size = base_size) +
  theme(
    plot.margin = unit(c(0,0,0,0), "cm"),
    legend.spacing = unit(0, "mm"),
    panel.grid = element_blank(),
    legend.position = "none",
    legend.justification = "left",
    legend.box.spacing = unit(0, "pt"),
    legend.box.margin = margin(0,0,0,0),
    legend.title = element_blank(),
    axis.title.y = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )
}

df.weights <- tibble(
  Hour = c(9, 10, 11, 12, 13, 14, 15),
  Weight = c(0.05, 0.05, 0.1, 0.3, 0.3, 0.15, 0.05)
)

relevant_hours <- df.weights %>% filter(Weight != 0) %>% pull(Hour)

hourly_data <- read_csv(
  '../../data/mtk.csv.gz',
  col_types = get_col_types()
) %>%
  filter(Year == 2016) %>%
  filter(Metric_Type == 'HSV') %>% 
  select(-contains('gcc')) %>%
  filter(Hour %in% relevant_hours) %>%
  group_by(Year, Day, Hour, HSV_Bin) %>%
  slice(1) %>%
  ungroup %>%
  left_join(df.weights, by=c('Hour'))


weighted_data <- hourly_data %>%
  mutate(HSV_H = Weight * HSV_H) %>%
  mutate(HSV_SMean = Weight * HSV_SMean) %>%
  mutate(HSV_VMean = Weight * HSV_VMean) %>%
  mutate(HSV_SMode = Weight * HSV_SMode) %>%
  mutate(HSV_VMode = Weight * HSV_VMode) %>%
  group_by(Day, HSV_Bin, Considered_Pixels) %>%
  summarize(
    HSV_H = as.integer(sum(HSV_H)),
    HSV_SMean = sum(HSV_SMean, na.rm = TRUE),
    HSV_VMean = sum(HSV_VMean, na.rm = TRUE),
    HSV_SMode = sum(HSV_SMode, na.rm = TRUE),
    HSV_VMode = sum(HSV_VMode, na.rm = TRUE)
  ) %>%
  ungroup

hourly_histograms <- hourly_data %>%
  select(Year, Day, Hour, Metric_Type, HSV_Bin, HSV_H) %>%
  mutate(
    Bin = case_when(
      Metric_Type == 'HSV' ~ HSV_Bin
    ),
    Bin_Value = case_when(
      Metric_Type == 'HSV' ~ HSV_H
    )
  ) %>%
  select(-HSV_Bin, -HSV_H)

weighted_histogram <- weighted_data %>%
  mutate(Year = 2016) %>%
  mutate(Metric_Type = 'HSV') %>%
  select(Year, Day, Metric_Type, HSV_Bin, HSV_H) %>%
  mutate(
    Bin = case_when(
      Metric_Type == 'HSV' ~ HSV_Bin
    ),
    Bin_Value = case_when(
      Metric_Type == 'HSV' ~ HSV_H
    )
  ) %>%
  select(-HSV_Bin, -HSV_H)

a <- hourly_histograms %>%
  select(Year, Day, Hour, Metric_Type, Bin, Bin_Value)
b <- weighted_histogram %>%
  select(Year, Day, Metric_Type, Bin, Bin_Value)

a <- a %>% filter(Day %in% b$Day)
b <- b %>% filter(Day %in% a$Day)

df.EMD <- a %>%
  left_join(b, by=c('Year', 'Day', 'Metric_Type', 'Bin')) %>%
  rename(
    P = Bin_Value.x,
    Q = Bin_Value.y
  ) %>%
  group_by(Year, Day, Hour, Metric_Type) %>%
  mutate(`P_i-Q_i` = lag(lead(P-Q))) %>%
  mutate(`EMD_i` = ifelse(is.na(`P_i-Q_i`), 0, `P_i-Q_i`)) %>%
  mutate(`EMD_i` = cumsum(`EMD_i`)) %>%
  summarize(Distance = sum(abs(`EMD_i`))) %>%
  ungroup %>%
  arrange(Year, Day, Metric_Type)

df.EMD.weighted <- df.EMD %>%
  left_join(df.weights, by=c('Hour')) %>%
  mutate(Weighted_Distance = Distance * Weight) %>%
  group_by(Year, Day, Metric_Type) %>%
  summarize(Q = sum(Weighted_Distance))

uncertainty_by_style <- df.EMD.weighted %>%
  mutate(
    Q = case_when(
      Metric_Type == 'Gcc' ~ Q/100,
      Metric_Type == 'HSV' ~ Q/360
    )
  )

hsv_weighted <- weighted_data %>%
  mutate(Year = 2016) %>%
  mutate(Metric_Type = 'HSV') %>%
  filter(Year == 2016) %>%
  filter(Metric_Type == 'HSV')

hsv_cpm_for_plot <- hsv_weighted %>%
  # Compute the color codes
  mutate(
    Color.Code.H = hex(HSV(HSV_Bin, 1, 1)),
    Color.Code.Mean = hex(HSV(HSV_Bin, HSV_SMean, HSV_VMean)),
    Color.Code.Mode = hex(HSV(HSV_Bin, HSV_SMode, HSV_VMode)),
    #Color.Code.Gcc = hex(RGB(Gcc_Mean_R, Gcc_Mean_G, Gcc_Mean_B))
  ) %>% 
  select(
    -HSV_SMean, -HSV_VMean,
    -HSV_SMode, -HSV_VMode,
    #-Gcc_Mean_R, -Gcc_Mean_G, -Gcc_Mean_B
  ) %>%
  # Extract the bin and bin value information
  mutate(
    Bin = case_when(
      Metric_Type == 'HSV' ~ HSV_Bin
      #Metric_Type == 'Gcc' ~ Gcc_Bin
    ),
    Bin_Value = as.integer(case_when(
      Metric_Type == 'HSV' ~ HSV_H
      #Metric_Type == 'Gcc' ~ Gcc_Value
    ))
  ) %>%
  select(-HSV_Bin, -HSV_H) %>%
  select(Year, Day, Metric_Type, Bin, Bin_Value, everything()) %>%
  # Make it tidy
  gather(Style, Color, -Year, -Day, -Metric_Type, -Bin, -Bin_Value) %>%
  mutate(Style = gsub('Color.Code.', '', Style)) %>%
  # Remove useless combinations
  filter(!(Metric_Type == 'Gcc' & Style %in% c('H', 'Mean', 'Mode'))) %>%
  filter(!(Metric_Type == 'HSV' & Style == 'Gcc')) %>%
  # Create the key
  mutate(Key = paste(Year, Day, Bin, Style, sep='_')) %>%
  mutate(Key = factor(Key, levels=Key)) %>%
  # Sort the bins
  arrange(Style, Year, Day, Bin) %>%
  # Calculate the cumsums
  group_by(Style, Year, Day) %>%
  arrange(Bin) %>%
  filter(Bin_Value != 0) %>%
  mutate(
    Y.min = cumsum(Bin_Value) - Bin_Value,
    Y.max = cumsum(Bin_Value)
  ) %>%
  ungroup %>%
  arrange(Style, Year, Day, Bin)

palette <- hsv_cpm_for_plot %>% pull(Color)
names(palette) <- hsv_cpm_for_plot %>% pull(Key)

hsv_cpm_plot <- hsv_cpm_for_plot %>%
  filter(Style == 'H') %>%
  ggplot() +
    scale_fill_manual(values=palette) +
    geom_rect(
      aes(xmin=Day, xmax=Day+1, ymin=Y.min, ymax=Y.max, fill=Key)
    ) +
    get_theme(base_size = 12) +
    theme(
      plot.margin = unit(c(0,0,0,0), 'mm'),
    )
    scale_x_continuous(
      name = 'DOY (2016)',
      breaks = c(0, 50, 100, 150, 200, 250, 300, 350)
    )

quality_plot <- uncertainty_by_style %>%
  filter(Year == 2016) %>%
  filter(Metric_Type == 'HSV') %>%
  ungroup %>%
  mutate(Q = Q/max(Q)) %>%
  ggplot(aes(x = Day, y = Q)) +
    geom_col(width = 1) +
    theme_bw() +
    theme(
      plot.margin = unit(c(1,0,0,0), 'mm'),
      panel.grid = element_blank(),
      legend.position = 'none',
      legend.spacing = unit(0, 'mm'),
      legend.box.spacing = unit(0, 'pt'),
      legend.box.margin = margin(0,0,0,0),
      axis.title.x = element_blank(),
      axis.text.x = element_blank(),
      axis.ticks.x = element_blank(),
      axis.title.y = element_text(size=10),
    ) +
    ylab("Uncert.\nLevel")

p <- plot_grid(
  quality_plot,
  hsv_cpm_plot, 
  nrow=2,
  ncol = 1,
  align='vh',
  rel_heights=c(1, 3)
)

ggsave('./mtk-2016-weighted-hsv-Q.pdf', plot=p, width=8, height=3)
#+END_SRC
** Section 5
*** Figure 10 (ahs-analysis-noon)

#+BEGIN_SRC R :tangle section-5/ahs-analysis-noon.R
#!/usr/bin/Rscript
library(tidyverse)
library(colorspace)

get_col_types <- function() {
  cols(
    Dataset = col_character(),
    Camera_ID = col_character(),
    Year = col_integer(),
    Day = col_integer(),
    Hour = col_integer(),
    Minute = col_integer(),
    Metric_Type = col_character(),
    Considered_Pixels = col_integer(),
    HSV_Bin = col_integer(),
    HSV_H = col_double(),
    HSV_SMean = col_double(),
    HSV_VMean = col_double(),
    HSV_SMode = col_double(),
    HSV_VMode = col_double(),
    Gcc_Bin = col_integer(),
    Gcc_Value = col_double(),
    Gcc_Mean_R = col_double(),
    Gcc_Mean_G = col_double(),
    Gcc_Mean_B = col_double()
  )
}

get_theme <- function(base_size = 14) {
  theme_bw(base_size = base_size) +
  theme(
    plot.margin = unit(c(0,0,0,0), "cm"),
    legend.spacing = unit(0, "mm"),
    panel.grid = element_blank(),
    legend.position = "none",
    legend.justification = "left",
    legend.box.spacing = unit(0, "pt"),
    legend.box.margin = margin(0,0,0,0),
    legend.title = element_blank(),
    axis.title.y = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )
}

data <- read_csv(
  '../../data/ahs.csv.gz',
  col_types = get_col_types()
) %>%
  filter(Hour == 12) %>%
  group_by(Year, Day, Hour, HSV_Bin, Gcc_Bin) %>%
  slice(1) %>%
  ungroup %>%
  # Remove unnecessary columns
  select(-Dataset, -Camera_ID, -Hour, -Minute, -Considered_Pixels) %>%
  # Compute the color codes
  mutate(
    Color.Code.H = hex(HSV(HSV_Bin, 1, 1)),
    Color.Code.Mean = hex(HSV(HSV_Bin, HSV_SMean, HSV_VMean)),
    Color.Code.Mode = hex(HSV(HSV_Bin, HSV_SMode, HSV_VMode)),
    Color.Code.Gcc = hex(RGB(Gcc_Mean_R, Gcc_Mean_G, Gcc_Mean_B))
  ) %>% 
  select(
    -HSV_SMean, -HSV_VMean,
    -HSV_SMode, -HSV_VMode,
    -Gcc_Mean_R, -Gcc_Mean_G, -Gcc_Mean_B
  ) %>%
  # Extract the bin and bin value information
  mutate(
    Bin = case_when(
      Metric_Type == 'HSV' ~ HSV_Bin,
      Metric_Type == 'Gcc' ~ Gcc_Bin
    ),
    Bin_Value = as.integer(case_when(
      Metric_Type == 'HSV' ~ HSV_H,
      Metric_Type == 'Gcc' ~ Gcc_Value
    ))
  ) %>%
  select(-HSV_Bin, -HSV_H, -Gcc_Bin, -Gcc_Value) %>%
  select(Year, Day, Metric_Type, Bin, Bin_Value, everything()) %>%
  # Make it tidy
  gather(Style, Color, -Year, -Day, -Metric_Type, -Bin, -Bin_Value) %>%
  mutate(Style = gsub('Color.Code.', '', Style)) %>%
  # Remove useless combinations
  filter(!(Metric_Type == 'Gcc' & Style %in% c('H', 'Mean', 'Mode'))) %>%
  filter(!(Metric_Type == 'HSV' & Style == 'Gcc')) %>%
  # Create the key
  mutate(Key = paste(Year, Day, Bin, Style, sep='_')) %>%
  mutate(Key = factor(Key, levels=Key)) %>%
  # Sort the bins
  arrange(Style, Year, Day, Bin) %>%
  # Calculate the cumsums
  group_by(Style, Year, Day) %>%
  arrange(Bin) %>%
  filter(Bin_Value != 0) %>%
  mutate(
    Y.min = cumsum(Bin_Value) - Bin_Value,
    Y.max = cumsum(Bin_Value)
  ) %>%
  ungroup %>%
  arrange(Style, Year, Day, Bin)

palette <- data %>% pull(Color)
names(palette) <- data %>% pull(Key)

p <- data %>%
  filter(Year != 2017) %>%
  mutate(
    Style = case_when(
      Style == 'Gcc' ~ 'Gcc_Mean',
      TRUE ~ paste0('HSV_', Style)
    )
  ) %>%
  ggplot() +
    scale_fill_manual(values=palette) +
    geom_rect(
      aes(xmin=Day, xmax=Day+1, ymin=Y.min, ymax=Y.max, fill=Key)
    ) +
    get_theme(base_size = 12) +
    scale_x_continuous(name = 'DOY') +
    facet_grid(Year~Style)

ggsave('./ahs-analysis-noon.pdf', plot=p, width=8, height=6)
#+END_SRC
*** Figure 12 (mtk-weights)

#+BEGIN_SRC R :tangle section-5/mtk-weights.R
#!/usr/bin/Rscript
library(tidyverse)

df.weights = tibble(
  Hour = c(8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18),
  Weight = c(0.025, 0.05, 0.05, 0.1, 0.15, 0.25, 0.15, 0.1, 0.05, 0.05, 0.025)
)

p <- df.weights %>%
  mutate(Hour = as.factor(Hour)) %>%
  ggplot(aes(x = Hour, y = Weight)) +
  geom_col() +
  geom_text(aes(label = Weight, angle = 45), nudge_y = 0.07) +
  theme_bw(base_size = 12) +
    theme(
      plot.margin = unit(c(0,0,0,0), "cm"),
      legend.spacing = unit(0, "mm"),
      panel.grid = element_blank(),
      legend.position = "none",
      legend.justification = "left",
      legend.box.spacing = unit(0, "pt"),
      legend.box.margin = margin(0,0,0,0),
      legend.title = element_blank()
    ) +
    xlab('Hour') +
    ylab('Weight') +
    ylim(0, 0.37)

ggsave('./mtk-weights.pdf', plot = p, width = 4.5, height = 1.5)
#+END_SRC
*** Figure 13 (mtk-2016-hourly-8-18)

#+BEGIN_SRC R :tangle section-5/mtk-2016-hourly-8-18.R
#!/usr/bin/Rscript
library(tidyverse)

library(tidyverse)
library(colorspace)

get_col_types <- function() {
  cols(
    Dataset = col_character(),
    Camera_ID = col_character(),
    Year = col_integer(),
    Day = col_integer(),
    Hour = col_integer(),
    Minute = col_integer(),
    Metric_Type = col_character(),
    Considered_Pixels = col_integer(),
    HSV_Bin = col_integer(),
    HSV_H = col_double(),
    HSV_SMean = col_double(),
    HSV_VMean = col_double(),
    HSV_SMode = col_double(),
    HSV_VMode = col_double(),
    Gcc_Bin = col_integer(),
    Gcc_Value = col_double(),
    Gcc_Mean_R = col_double(),
    Gcc_Mean_G = col_double(),
    Gcc_Mean_B = col_double()
  )
}

get_theme <- function(base_size = 14) {
  theme_bw(base_size = base_size) +
  theme(
    plot.margin = unit(c(0,0,0,0), "cm"),
    legend.spacing = unit(0, "mm"),
    panel.grid = element_blank(),
    legend.position = "none",
    legend.justification = "left",
    legend.box.spacing = unit(0, "pt"),
    legend.box.margin = margin(0,0,0,0),
    legend.title = element_blank(),
    axis.title.y = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )
}

data <- read_csv(
  '../../data/mtk.csv.gz',
  col_types = get_col_types()
) %>%
  filter(Camera_ID == 'btp_w') %>%
  filter(Year == 2016) %>%
  group_by(Year, Day, Hour, HSV_Bin, Gcc_Bin) %>%
  slice(1) %>%
  ungroup %>%
  # Remove unnecessary columns
  select(-Dataset, -Camera_ID, -Minute, -Considered_Pixels) %>%
  # Compute the color codes
  mutate(
    Color.Code.H = hex(HSV(HSV_Bin, 1, 1)),
    Color.Code.Mean = hex(HSV(HSV_Bin, HSV_SMean, HSV_VMean)),
    Color.Code.Mode = hex(HSV(HSV_Bin, HSV_SMode, HSV_VMode)),
    Color.Code.Gcc = hex(RGB(Gcc_Mean_R, Gcc_Mean_G, Gcc_Mean_B))
  ) %>% 
  select(
    -HSV_SMean, -HSV_VMean,
    -HSV_SMode, -HSV_VMode,
    -Gcc_Mean_R, -Gcc_Mean_G, -Gcc_Mean_B
  ) %>%
  # Extract the bin and bin value information
  mutate(
    Bin = case_when(
      Metric_Type == 'HSV' ~ HSV_Bin,
      Metric_Type == 'Gcc' ~ Gcc_Bin
    ),
    Bin_Value = as.integer(case_when(
      Metric_Type == 'HSV' ~ HSV_H,
      Metric_Type == 'Gcc' ~ Gcc_Value
    ))
  ) %>%
  select(-HSV_Bin, -HSV_H, -Gcc_Bin, -Gcc_Value) %>%
  select(Year, Day, Hour, Metric_Type, Bin, Bin_Value, everything()) %>%
  # Make it tidy
  gather(Style, Color, -Year, -Day, -Hour, -Metric_Type, -Bin, -Bin_Value) %>%
  mutate(Style = gsub('Color.Code.', '', Style)) %>%
  # Remove useless combinations
  filter(!(Metric_Type == 'Gcc' & Style %in% c('H', 'Mean', 'Mode'))) %>%
  filter(!(Metric_Type == 'HSV' & Style == 'Gcc')) %>%
  # Create the key
  mutate(Key = paste(Year, Day, Hour, Bin, Style, sep='_')) %>%
  mutate(Key = factor(Key, levels=Key)) %>%
  # Sort the bins
  arrange(Style, Year, Day, Hour, Bin) %>%
  # Calculate the cumsums
  group_by(Style, Year, Day, Hour) %>%
  arrange(Bin) %>%
  filter(Bin_Value != 0) %>%
  mutate(
    Y.min = cumsum(Bin_Value) - Bin_Value,
    Y.max = cumsum(Bin_Value)
  ) %>%
  ungroup %>%
  arrange(Style, Year, Day, Hour, Bin)

palette <- data %>% pull(Color)
names(palette) <- data %>% pull(Key)

p <- data %>%
  filter(Style %in% c('H', 'Mode')) %>%
  mutate(Style = paste0('HSV_', Style)) %>%
  ggplot() +
    scale_fill_manual(values=palette) +
    geom_rect(
      aes(xmin=Day, xmax=Day+1, ymin=Y.min, ymax=Y.max, fill=Key)
    ) +
    get_theme(base_size = 18) +
    xlab('DOY (2016)') +
    facet_grid(Hour~Style)

ggsave('./mtk-2016-hourly-8-18.pdf', plot = p, width = 8, height = 8)
#+END_SRC
*** Figure 14 (mtk-2016-merged)

#+BEGIN_SRC R :tangle section-5/mtk-2016-merged.R
#!/usr/bin/Rscript
library(tidyverse)
library(colorspace)

get_col_types <- function() {
  cols(
    Dataset = col_character(),
    Camera_ID = col_character(),
    Year = col_integer(),
    Day = col_integer(),
    Hour = col_integer(),
    Minute = col_integer(),
    Metric_Type = col_character(),
    Considered_Pixels = col_integer(),
    HSV_Bin = col_integer(),
    HSV_H = col_double(),
    HSV_SMean = col_double(),
    HSV_VMean = col_double(),
    HSV_SMode = col_double(),
    HSV_VMode = col_double(),
    Gcc_Bin = col_integer(),
    Gcc_Value = col_double(),
    Gcc_Mean_R = col_double(),
    Gcc_Mean_G = col_double(),
    Gcc_Mean_B = col_double()
  )
}

get_theme <- function(base_size = 14) {
  theme_bw(base_size = base_size) +
  theme(
    plot.margin = unit(c(0,0,0,0), "cm"),
    legend.spacing = unit(0, "mm"),
    panel.grid = element_blank(),
    legend.position = "none",
    legend.justification = "left",
    legend.box.spacing = unit(0, "pt"),
    legend.box.margin = margin(0,0,0,0),
    legend.title = element_blank(),
    axis.title.y = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )
}

df.weights = tibble(
  Hour = c(8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18),
  Weight = c(0.025, 0.05, 0.05, 0.1, 0.15, 0.25, 0.15, 0.1, 0.05, 0.05, 0.025)
)

data <- read_csv(
  '../../data/mtk.csv.gz',
  col_types = get_col_types()
) %>%
  filter(Camera_ID == 'btp_w') %>%
  filter(Year == 2016) %>%
  group_by(Year, Day, Hour, HSV_Bin, Gcc_Bin) %>%
  slice(1) %>%
  ungroup %>%
  left_join(df.weights, by=c('Hour')) %>%
  mutate(
    HSV_H = Weight * HSV_H,
    HSV_SMean = Weight * HSV_SMean,
    HSV_VMean = Weight * HSV_VMean,
    HSV_SMode = Weight * HSV_SMode,
    HSV_VMode = Weight * HSV_VMode,
    Gcc_Value = Weight * Gcc_Value,
    Gcc_Mean_R = Weight * Gcc_Mean_R,
    Gcc_Mean_G = Weight * Gcc_Mean_G,
    Gcc_Mean_B = Weight * Gcc_Mean_B
  ) %>%
  group_by(Year, Day, HSV_Bin, Gcc_Bin) %>%
  summarize(
    HSV_H = as.integer(sum(HSV_H)),
    HSV_SMean = sum(HSV_SMean, na.rm = TRUE),
    HSV_VMean = sum(HSV_VMean, na.rm = TRUE),
    HSV_SMode = sum(HSV_SMode, na.rm = TRUE),
    HSV_VMode = sum(HSV_VMode, na.rm = TRUE),
    Gcc_Value = as.integer(sum(Gcc_Value)),
    Gcc_Mean_R = sum(Gcc_Mean_R, na.rm = TRUE),
    Gcc_Mean_G = sum(Gcc_Mean_G, na.rm = TRUE),
    Gcc_Mean_B = sum(Gcc_Mean_B, na.rm = TRUE)
  ) %>%
  ungroup %>%
    mutate(
    Metric_Type = case_when(
      HSV_Bin == -1 ~ 'Gcc',
      Gcc_Bin == -1 ~ 'HSV'
    )
  ) %>%
  # Compute the color codes
  mutate(
    Color.Code.H = hex(HSV(HSV_Bin, 1, 1)),
    Color.Code.Mean = hex(HSV(HSV_Bin, HSV_SMean, HSV_VMean)),
    Color.Code.Mode = hex(HSV(HSV_Bin, HSV_SMode, HSV_VMode)),
    Color.Code.Gcc = hex(RGB(Gcc_Mean_R, Gcc_Mean_G, Gcc_Mean_B))
  ) %>% 
  select(
    -HSV_SMean, -HSV_VMean,
    -HSV_SMode, -HSV_VMode,
    -Gcc_Mean_R, -Gcc_Mean_G, -Gcc_Mean_B
  ) %>%
  # Extract the bin and bin value information
  mutate(
    Bin = case_when(
      Metric_Type == 'HSV' ~ HSV_Bin,
      Metric_Type == 'Gcc' ~ Gcc_Bin
    ),
    Bin_Value = as.integer(case_when(
      Metric_Type == 'HSV' ~ HSV_H,
      Metric_Type == 'Gcc' ~ Gcc_Value
    ))
  ) %>%
  select(-HSV_Bin, -HSV_H, -Gcc_Bin, -Gcc_Value) %>%
  select(Year, Day, Metric_Type, Bin, Bin_Value, everything()) %>%
  # Make it tidy
  gather(Style, Color, -Year, -Day, -Metric_Type, -Bin, -Bin_Value) %>%
  mutate(Style = gsub('Color.Code.', '', Style)) %>%
  # Remove useless combinations
  filter(!(Metric_Type == 'Gcc' & Style %in% c('H', 'Mean', 'Mode'))) %>%
  filter(!(Metric_Type == 'HSV' & Style == 'Gcc')) %>%
  # Create the key
  mutate(Key = paste(Year, Day, Bin, Style, sep='_')) %>%
  mutate(Key = factor(Key, levels=Key)) %>%
  # Sort the bins
  arrange(Style, Year, Day, Bin) %>%
  # Calculate the cumsums
  group_by(Style, Year, Day) %>%
  arrange(Bin) %>%
  filter(Bin_Value != 0) %>%
  mutate(
    Y.min = cumsum(Bin_Value) - Bin_Value,
    Y.max = cumsum(Bin_Value)
  ) %>%
  ungroup %>%
  arrange(Style, Year, Day, Bin)

# Create the color palette
palette <- data %>% pull(Color)
names(palette) <- data %>% pull(Key)

p <- data %>%
  filter(Style %in% c('H', 'Mode')) %>%
  mutate(Style = paste0('HSV_', Style)) %>%
  ggplot() +
    scale_fill_manual(values=palette) +
    geom_rect(
      aes(xmin=Day, xmax=Day+1, ymin=Y.min, ymax=Y.max, fill=Key)
    ) +
    get_theme(base_size = 12) +
    xlab('DOY (2016)') +
    facet_grid(Year ~ Style)

ggsave('./mtk-2016-merged.pdf', plot = p, width = 8, height = 2)
#+END_SRC

*** Figure 15 (multiday-weights-3-days)
#+BEGIN_SRC R :tangle section-5/multiday-weights-3-days.R
#!/usr/bin/Rscript
library(tidyverse)

get_weight <- function(day, hour, group) {
  baseHourlyWeight <- case_when (
    hour == 8 ~ 0.025,
    hour == 9 ~ 0.025,
    hour == 10 ~ 0.05,
    hour == 11 ~ 0.1,
    hour == 12 ~ 0.175,
    hour == 13 ~ 0.25,
    hour == 14 ~ 0.175,
    hour == 15 ~ 0.1,
    hour == 16 ~ 0.05,
    hour == 17 ~ 0.025,
    hour == 18 ~ 0.025
  )

  dayGroupDelta <- group - day
  weightCoefficient <- case_when(
    dayGroupDelta == 2 ~ 0.25,
    dayGroupDelta == 1 ~ 0.35,
    dayGroupDelta == 0 ~ 0.4
  )
  
  return (weightCoefficient * baseHourlyWeight)
}

xLabel = 'Day (n-2)                         Day (n-1)                         Day (n)'

p <- expand.grid(Hour = 8:18, Day = 1:3) %>%
  mutate(Index = row_number()) %>%
  mutate(Group = 3) %>%
  mutate(Weight = get_weight(Day, Hour, Group)) %>%
  ggplot(aes(x = Index, y = Weight)) +
    geom_col() +
    theme_bw(base_size = 20) +
    theme(
      plot.margin = unit(c(0,0,0,0), "cm"),
      legend.spacing = unit(0, "mm"),
      panel.grid = element_blank(),
      legend.position = "none",
      legend.justification = "left",
      legend.box.spacing = unit(0, "pt"),
      legend.box.margin = margin(0,0,0,0),
      legend.title = element_blank(),
      axis.text.x = element_blank()
    ) +
    scale_x_continuous(
      name = xLabel,
      breaks = c(0.5, 11.5, 22.5, 33.5),
      limits = c(0.5, 33.5)
    ) +
    scale_y_continuous(
      name = 'Weight',
      breaks = seq(0, 0.1, 0.025),
    )

ggsave('multiday-weights-3-days.pdf', plot=p, width=8, height=2)
#+END_SRC

*** Figure 16 (mtk-2016-multiday-3-day-window)

#+BEGIN_SRC R :tangle section-5/mtk-2016-multiday-3-day-window.R
#!/usr/bin/Rscript
library(tidyverse)
library(colorspace)

get_col_types <- function() {
  cols(
    Dataset = col_character(),
    Camera_ID = col_character(),
    Year = col_integer(),
    Day = col_integer(),
    Hour = col_integer(),
    Minute = col_integer(),
    Metric_Type = col_character(),
    Considered_Pixels = col_integer(),
    HSV_Bin = col_integer(),
    HSV_H = col_double(),
    HSV_SMean = col_double(),
    HSV_VMean = col_double(),
    HSV_SMode = col_double(),
    HSV_VMode = col_double(),
    Gcc_Bin = col_integer(),
    Gcc_Value = col_double(),
    Gcc_Mean_R = col_double(),
    Gcc_Mean_G = col_double(),
    Gcc_Mean_B = col_double()
  )
}

get_theme <- function(base_size = 14) {
  theme_bw(base_size = base_size) +
  theme(
    plot.margin = unit(c(0,0,0,0), "cm"),
    legend.spacing = unit(0, "mm"),
    panel.grid = element_blank(),
    legend.position = "none",
    legend.justification = "left",
    legend.box.spacing = unit(0, "pt"),
    legend.box.margin = margin(0,0,0,0),
    legend.title = element_blank(),
    axis.title.y = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )
}

get_weight <- function(day, hour, group) {
  baseHourlyWeight <- case_when (
    hour == 8 ~ 0.025,
    hour == 9 ~ 0.025,
    hour == 10 ~ 0.05,
    hour == 11 ~ 0.1,
    hour == 12 ~ 0.175,
    hour == 13 ~ 0.25,
    hour == 14 ~ 0.175,
    hour == 15 ~ 0.1,
    hour == 16 ~ 0.05,
    hour == 17 ~ 0.025,
    hour == 18 ~ 0.025
  )

  dayGroupDelta <- group - day
  weightCoefficient <- case_when(
    dayGroupDelta == 2 ~ 0.25,
    dayGroupDelta == 1 ~ 0.35,
    dayGroupDelta == 0 ~ 0.4
  )
  
  return (weightCoefficient * baseHourlyWeight)
}

data <- read_csv(
  '../../data/mtk.csv.gz',
  col_types = get_col_types()
) %>%
  filter(Camera_ID == 'btp_w') %>%
  filter(Year == 2016) %>%
  filter(Metric_Type == 'HSV') %>%
  select(-contains('Gcc'), -contains('Mean'), -contains('Mode')) %>%
  spread(HSV_Bin, HSV_H) %>%
  filter(Minute == 0) %>%
  group_by(Day) %>%
  filter(n() == 11) %>%
  ungroup()

base_structure <- expand.grid(Hour = 8:18, Day = 1:365) %>%
  as_tibble() %>%
  mutate(Year = 2016) %>%
  mutate(Minute = 0)

spread_data <- base_structure %>%
  left_join(data, by=c('Year', 'Day', 'Hour', 'Minute'))

imagesPerGroup = 33
imagesPerDay = 11
groupsCount = nrow(data)/imagesPerGroup

groupList <- c()
indexList <- c()
for (group in 1:357) {
  groupStart <- (group * imagesPerDay) - (imagesPerGroup-1)
  groupEnd <- (group * imagesPerDay)
  indexList <- c(indexList, groupStart:groupEnd)
  groupList <- c(groupList, rep(group, times = imagesPerGroup))
}

skeleton <- tibble(
  Index = indexList,
  Group = groupList
) %>%
  filter(Index >= 1)

plot.data <- spread_data %>%
  slice(skeleton %>% pull(Index)) %>%
  cbind(skeleton) %>%
  as_tibble %>%
  mutate(Weight = get_weight(Day, Hour, Group)) %>%
  gather(
    HSV_Bin,
    HSV_H,
    -Index,
    -Group, 
    -Weight,
    -Dataset, 
    -Camera_ID, 
    -Year, 
    -Day, 
    -Hour, 
    -Minute, 
    -Metric_Type, 
    -Considered_Pixels
  ) %>%
  mutate(HSV_Bin = as.integer(HSV_Bin)) %>%
  group_by(Group) %>% 
  filter(sum(Weight) / 360 > 0.99) %>%
  ungroup %>%
  mutate(HSV_H = Weight * HSV_H) %>%
  group_by(Year, Group, HSV_Bin) %>%
  summarize(
    HSV_H = as.integer(sum(HSV_H))
  ) %>%
  ungroup %>%
  mutate(Color.Code.H = hex(HSV(HSV_Bin, 1, 1))) %>%
  rename(Bin = HSV_Bin) %>%
  rename(Bin_Value = HSV_H) %>%
  gather(Style, Color, -Group, -Year, -Bin, -Bin_Value) %>%
  mutate(Style = gsub('Color.Code.', '', Style)) %>%
  mutate(Key = paste(Year, Group, Bin, Style, sep='_')) %>%
  mutate(Key = factor(Key, levels=Key)) %>%
  arrange(Style, Year, Group, Bin) %>%
  # Calculate the cumsums
  group_by(Style, Year, Group) %>%
  arrange(Bin) %>%
  filter(Bin_Value != 0) %>%
  mutate(
    Y.min = cumsum(Bin_Value) - Bin_Value,
    Y.max = cumsum(Bin_Value)
  ) %>%
  ungroup %>%
  arrange(Style, Year, Group, Bin)

palette <- plot.data %>% pull(Color)
names(palette) <- plot.data %>% pull(Key)

p <- plot.data %>%
  ggplot() +
    scale_fill_manual(values=palette) +
    geom_rect(
      aes(xmin=Group, xmax=Group+1, ymin=Y.min, ymax=Y.max, fill=Key)
    ) +
    get_theme(base_size = 12) +
    xlab('DOY') +
    facet_grid(Year ~ Style)

ggsave('./mtk-2016-multiday-3-day-window.pdf', plot=p, width=8, height=2)

#+END_SRC
*** Figure 17 (mtk-2016-varying-window-sizes)
#+BEGIN_SRC R :tangle section-5/mtk-2016-varying-window-sizes.R
#!/usr/bin/Rscript
library(tidyverse)
library(colorspace)

get_col_types <- function() {
  cols(
    Dataset = col_character(),
    Camera_ID = col_character(),
    Year = col_integer(),
    Day = col_integer(),
    Hour = col_integer(),
    Minute = col_integer(),
    Metric_Type = col_character(),
    Considered_Pixels = col_integer(),
    HSV_Bin = col_integer(),
    HSV_H = col_double(),
    HSV_SMean = col_double(),
    HSV_VMean = col_double(),
    HSV_SMode = col_double(),
    HSV_VMode = col_double(),
    Gcc_Bin = col_integer(),
    Gcc_Value = col_double(),
    Gcc_Mean_R = col_double(),
    Gcc_Mean_G = col_double(),
    Gcc_Mean_B = col_double()
  )
}

get_theme <- function(base_size = 14) {
  theme_bw(base_size = base_size) +
  theme(
    plot.margin = unit(c(0,0,0,0), "cm"),
    legend.spacing = unit(0, "mm"),
    panel.grid = element_blank(),
    legend.position = "none",
    legend.justification = "left",
    legend.box.spacing = unit(0, "pt"),
    legend.box.margin = margin(0,0,0,0),
    legend.title = element_blank(),
    axis.title.y = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )
}

get_weight2 <- function(day, hour, group) {
  baseHourlyWeight <- case_when (
    hour == 8 ~ 0.025,
    hour == 9 ~ 0.025,
    hour == 10 ~ 0.05,
    hour == 11 ~ 0.1,
    hour == 12 ~ 0.175,
    hour == 13 ~ 0.25,
    hour == 14 ~ 0.175,
    hour == 15 ~ 0.1,
    hour == 16 ~ 0.05,
    hour == 17 ~ 0.025,
    hour == 18 ~ 0.025
  )

  dayGroupDelta <- group - day
  weightCoefficient <- case_when(
    dayGroupDelta == 1 ~ 0.3,
    dayGroupDelta == 0 ~ 0.7
  )
  
  return (weightCoefficient * baseHourlyWeight)
}

get_weight5 <- function(day, hour, group) {
  baseHourlyWeight <- case_when (
    hour == 8 ~ 0.025,
    hour == 9 ~ 0.025,
    hour == 10 ~ 0.05,
    hour == 11 ~ 0.1,
    hour == 12 ~ 0.175,
    hour == 13 ~ 0.25,
    hour == 14 ~ 0.175,
    hour == 15 ~ 0.1,
    hour == 16 ~ 0.05,
    hour == 17 ~ 0.025,
    hour == 18 ~ 0.025
  )

  dayGroupDelta <- group - day
  weightCoefficient <- case_when(
    dayGroupDelta == 4 ~ 0.2,
    dayGroupDelta == 3 ~ 0.2,
    dayGroupDelta == 2 ~ 0.2,
    dayGroupDelta == 1 ~ 0.2,
    dayGroupDelta == 0 ~ 0.2
  )
  
  return (weightCoefficient * baseHourlyWeight)
}

get_weight7 <- function(day, hour, group) {
  baseHourlyWeight <- case_when (
    hour == 8 ~ 0.025,
    hour == 9 ~ 0.025,
    hour == 10 ~ 0.05,
    hour == 11 ~ 0.1,
    hour == 12 ~ 0.175,
    hour == 13 ~ 0.25,
    hour == 14 ~ 0.175,
    hour == 15 ~ 0.1,
    hour == 16 ~ 0.05,
    hour == 17 ~ 0.025,
    hour == 18 ~ 0.025
  )

  dayGroupDelta <- group - day
  weightCoefficient <- case_when(
    dayGroupDelta == 6 ~ 0.1,
    dayGroupDelta == 5 ~ 0.1,
    dayGroupDelta == 4 ~ 0.15,
    dayGroupDelta == 3 ~ 0.15,
    dayGroupDelta == 2 ~ 0.15,
    dayGroupDelta == 1 ~ 0.15,
    dayGroupDelta == 0 ~ 0.2
  )
  
  return (weightCoefficient * baseHourlyWeight)
}

get_weight10 <- function(day, hour, group) {
  baseHourlyWeight <- case_when (
    hour == 8 ~ 0.025,
    hour == 9 ~ 0.025,
    hour == 10 ~ 0.05,
    hour == 11 ~ 0.1,
    hour == 12 ~ 0.175,
    hour == 13 ~ 0.25,
    hour == 14 ~ 0.175,
    hour == 15 ~ 0.1,
    hour == 16 ~ 0.05,
    hour == 17 ~ 0.025,
    hour == 18 ~ 0.025
  )

  dayGroupDelta <- group - day
  weightCoefficient <- case_when(
    dayGroupDelta == 9 ~ 0.05,
    dayGroupDelta == 8 ~ 0.1,
    dayGroupDelta == 7 ~ 0.1,
    dayGroupDelta == 6 ~ 0.1,
    dayGroupDelta == 5 ~ 0.1,
    dayGroupDelta == 4 ~ 0.1,
    dayGroupDelta == 3 ~ 0.1,
    dayGroupDelta == 2 ~ 0.1,
    dayGroupDelta == 1 ~ 0.1,
    dayGroupDelta == 0 ~ 0.15
  )
  
  return (weightCoefficient * baseHourlyWeight)
}

build_skeleton <- function (imagesPerGroup, imagesPerDay, dataRows) {
  groupsCount = nrow(dataRows)/imagesPerGroup

  groupList <- c()
  indexList <- c()
  for (group in 1:357) {
    groupStart <- (group * imagesPerDay) - (imagesPerGroup-1)
    groupEnd <- (group * imagesPerDay)
    indexList <- c(indexList, groupStart:groupEnd)
    groupList <- c(groupList, rep(group, times = imagesPerGroup))
  }

  return (
    tibble(
      Index = indexList,
      Group = groupList
    ) %>%
    filter(Index >= 1)
  )
}

generate_data_with_skeleton <- function (
  spread_data,
  skeleton,
  mode,
  get_weight_fun
) {
  return(
    spread_data %>%
      slice(skeleton %>% pull(Index)) %>%
      cbind(skeleton) %>%
      as_tibble %>%
      mutate(Weight = get_weight_fun(Day, Hour, Group)) %>%
      gather(
        HSV_Bin,
        HSV_H,
        -Index,
        -Group, 
        -Weight,
        -Dataset, 
        -Camera_ID, 
        -Year, 
        -Day, 
        -Hour, 
        -Minute, 
        -Metric_Type, 
        -Considered_Pixels
    ) %>%
    mutate(HSV_Bin = as.integer(HSV_Bin)) %>%
    group_by(Group) %>% 
    filter(sum(Weight) / 360 > 0.99) %>%
    ungroup %>%
    mutate(HSV_H = Weight * HSV_H) %>%
    group_by(Year, Group, HSV_Bin) %>%
    summarize(
      HSV_H = as.integer(sum(HSV_H))
    ) %>%
    ungroup %>%
    mutate(Color.Code.H = hex(HSV(HSV_Bin, 1, 1))) %>%
    rename(Bin = HSV_Bin) %>%
    rename(Bin_Value = HSV_H) %>%
    gather(Style, Color, -Group, -Year, -Bin, -Bin_Value) %>%
    mutate(Style = gsub('Color.Code.', '', Style)) %>%
    mutate(Key = paste(Year, Group, Bin, Style, sep='_')) %>%
    mutate(Key = factor(Key, levels=Key)) %>%
    arrange(Style, Year, Group, Bin) %>%
    # Calculate the cumsums
    group_by(Style, Year, Group) %>%
    arrange(Bin) %>%
    filter(Bin_Value != 0) %>%
    mutate(
      Y.min = cumsum(Bin_Value) - Bin_Value,
      Y.max = cumsum(Bin_Value)
    ) %>%
    ungroup %>%
    arrange(Style, Year, Group, Bin) %>%
    mutate(Mode = mode)
  )
}

data <- read_csv(
  '../../data/mtk.csv.gz',
  col_types = get_col_types()
) %>%
  filter(Camera_ID == 'btp_w') %>%
  filter(Year == 2016) %>%
  filter(Metric_Type == 'HSV') %>%
  select(-contains('Gcc'), -contains('Mean'), -contains('Mode')) %>%
  spread(HSV_Bin, HSV_H) %>%
  filter(Minute == 0) %>%
  group_by(Day) %>%
  filter(n() == 11) %>%
  ungroup()

base_structure <- expand.grid(Hour = 8:18, Day = 1:365) %>%
  as_tibble() %>%
  mutate(Year = 2016) %>%
  mutate(Minute = 0)

spread_data <- base_structure %>%
  left_join(data, by=c('Year', 'Day', 'Hour', 'Minute'))

skeleton.2 <- build_skeleton(
  imagesPerGroup = 22,
  imagesPerDay = 11,
  dataRows = nrow(data)
)

skeleton.5 <- build_skeleton(
  imagesPerGroup = 55,
  imagesPerDay = 11,
  dataRows = nrow(data)
)

skeleton.7 <- build_skeleton(
  imagesPerGroup = 77,
  imagesPerDay = 11,
  dataRows = nrow(data)
)

skeleton.10 <- build_skeleton(
  imagesPerGroup = 110,
  imagesPerDay = 11,
  dataRows = nrow(data)
)

plot.data.2 <- generate_data_with_skeleton(
  spread_data = spread_data,
  skeleton = skeleton.2,
  mode = '02-day window',
  get_weight_fun = get_weight2
)

plot.data.5 <- generate_data_with_skeleton(
  spread_data = spread_data,
  skeleton = skeleton.5,
  mode = '05-day window',
  get_weight_fun = get_weight5
)

plot.data.7 <- generate_data_with_skeleton(
  spread_data = spread_data,
  skeleton = skeleton.7,
  mode = '07-day window',
  get_weight_fun = get_weight7
)

plot.data.10 <- generate_data_with_skeleton(
  spread_data = spread_data,
  skeleton = skeleton.10,
  mode = '10-day window',
  get_weight_fun = get_weight10
)

plot.data <- rbind(
  plot.data.2,
  plot.data.5,
  plot.data.7,
  plot.data.10
)

palette <- plot.data %>% pull(Color)
names(palette) <- plot.data %>% pull(Key)

p <- plot.data %>%
  ggplot() +
    scale_fill_manual(values=palette) +
    geom_rect(
      aes(xmin=Group, xmax=Group+1, ymin=Y.min, ymax=Y.max, fill=Key)
    ) +
    get_theme(base_size = 22) +
    xlab('DOY (2016)') +
    facet_wrap(~ Mode, ncol = 1)

ggsave('./mtk-2016-varying-window-sizes.pdf', plot=p, width=8, height=6)

#+END_SRC
*** Figure 18 (multiyear-weights)
#+BEGIN_SRC R :tangle section-5/multiyear-weights.R
#!/usr/bin/Rscript
library(tidyverse)

get_weight <- function(day, hour, group) {
  baseHourlyWeight <- case_when (
    hour == 10 ~ 0.1,
    hour == 11 ~ 0.15,
    hour == 12 ~ 0.25,
    hour == 13 ~ 0.3,
    hour == 14 ~ 0.2,
  )

  dayGroupDelta <- group - day
  weightCoefficient <- case_when(
    dayGroupDelta == 2 ~ 0.25,
    dayGroupDelta == 1 ~ 0.35,
    dayGroupDelta == 0 ~ 0.4
  )
  
  return (weightCoefficient * baseHourlyWeight)
}

xLabel = 'Day (n-2)                          Day (n-1)                          Day (n)'

p <- expand.grid(Hour = 10:14, Day = 1:3) %>%
  mutate(Index = row_number()) %>%
  mutate(Group = 3) %>%
  mutate(Weight = get_weight(Day, Hour, Group)) %>%
  ggplot(aes(x = Index, y = Weight)) +
    geom_col() +
    theme_bw(base_size = 14) +
    theme(
      plot.margin = unit(c(0,0,0,0), "cm"),
      legend.spacing = unit(0, "mm"),
      panel.grid = element_blank(),
      legend.position = "none",
      legend.justification = "left",
      legend.box.spacing = unit(0, "pt"),
      legend.box.margin = margin(0,0,0,0),
      legend.title = element_blank(),
      axis.text.x = element_blank()
    ) +
    scale_x_continuous(
      name = xLabel,
      breaks = c(0.5, 5.5, 10.5, 15.5),
      limits = c(0.5, 15.5)
    ) +
    scale_y_continuous(
      name = 'Weight',
      breaks = c(0, 0.025, 0.05, 0.075, 0.1, 0.125),
      limits = c(0, 0.135)
    )

ggsave('multiyear-weights.pdf', plot=p, width=8, height=2)
#+END_SRC
*** Figure 19 (mtk-2016-multiday-manyyears)
#+BEGIN_SRC R :tangle section-5/mtk-2016-multiday-manyyears.R
#!/usr/bin/Rscript
library(tidyverse)
library(colorspace)

get_col_types <- function() {
  cols(
    Dataset = col_character(),
    Camera_ID = col_character(),
    Year = col_integer(),
    Day = col_integer(),
    Hour = col_integer(),
    Minute = col_integer(),
    Metric_Type = col_character(),
    Considered_Pixels = col_integer(),
    HSV_Bin = col_integer(),
    HSV_H = col_double(),
    HSV_SMean = col_double(),
    HSV_VMean = col_double(),
    HSV_SMode = col_double(),
    HSV_VMode = col_double(),
    Gcc_Bin = col_integer(),
    Gcc_Value = col_double(),
    Gcc_Mean_R = col_double(),
    Gcc_Mean_G = col_double(),
    Gcc_Mean_B = col_double()
  )
}

get_theme <- function(base_size = 14) {
  theme_bw(base_size = base_size) +
  theme(
    plot.margin = unit(c(0,0,0,0), "cm"),
    legend.spacing = unit(0, "mm"),
    panel.grid = element_blank(),
    legend.position = "none",
    legend.justification = "left",
    legend.box.spacing = unit(0, "pt"),
    legend.box.margin = margin(0,0,0,0),
    legend.title = element_blank(),
    axis.title.y = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )
}

get_weight <- function(day, hour, group) {
  baseHourlyWeight <- case_when (
    hour == 10 ~ 0.1,
    hour == 11 ~ 0.15,
    hour == 12 ~ 0.25,
    hour == 13 ~ 0.3,
    hour == 14 ~ 0.2,
  )

  dayGroupDelta <- group - day
  weightCoefficient <- case_when(
    dayGroupDelta == 2 ~ 0.25,
    dayGroupDelta == 1 ~ 0.35,
    dayGroupDelta == 0 ~ 0.4
  )
  
  return (weightCoefficient * baseHourlyWeight)
}

data <- read_csv(
  '../../data/mtk.csv.gz',
  col_types = get_col_types()
) %>%
  filter(Camera_ID == 'btp_w') %>%
  filter(Metric_Type == 'HSV') %>%
  filter(Year %in% 2012:2016) %>%
  select(-contains('Gcc'), -contains('Mean'), -contains('Mode')) %>%
  spread(HSV_Bin, HSV_H) %>%
  group_by(Year, Day, Hour, Metric_Type) %>%
  slice(1) %>%
  ungroup %>%
  group_by(Year, Day) %>%
  filter(n() >= 7) %>%
  ungroup() %>%
  arrange(Year, Day, Hour)

base_structure <- expand.grid(
  Hour = 10:14,
  Day = 1:365,
  Year = 2012:2016
) %>%
  as_tibble() %>%
  mutate(Minute = 0)

spread_data <- base_structure %>%
  left_join(data, by=c('Year', 'Day', 'Hour', 'Minute'))

years_list <- spread_data %>%
  split(.$Year)

daysPerGroup = 3
imagesPerDay = 5
imagesPerGroup = daysPerGroup * imagesPerDay

groupsCount = nrow(data)/imagesPerGroup

groupList <- c()
indexList <- c()
for (group in 1:357) {
  groupStart <- (group * imagesPerDay) - (imagesPerGroup-1)
  groupEnd <- (group * imagesPerDay)
  indexList <- c(indexList, groupStart:groupEnd)
  groupList <- c(groupList, rep(group, times = imagesPerGroup))
}

skeleton <- tibble(
  Index = indexList,
  Group = groupList
) %>%
  filter(Index >= 1)

year.2012 <- years_list[['2012']] %>%
  slice(skeleton %>% pull(Index)) %>%
  cbind(skeleton) %>%
  select(Index, Group, everything()) %>%
  as_tibble

year.2013 <- years_list[['2013']] %>%
  slice(skeleton %>% pull(Index)) %>%
  cbind(skeleton) %>%
  select(Index, Group, everything()) %>%
  as_tibble

year.2014 <- years_list[['2014']] %>%
  slice(skeleton %>% pull(Index)) %>%
  cbind(skeleton) %>%
  select(Index, Group, everything()) %>%
  as_tibble

year.2015 <- years_list[['2015']] %>%
  slice(skeleton %>% pull(Index)) %>%
  cbind(skeleton) %>%
  select(Index, Group, everything()) %>%
  as_tibble

year.2016 <- years_list[['2016']] %>%
  slice(skeleton %>% pull(Index)) %>%
  cbind(skeleton) %>%
  select(Index, Group, everything()) %>%
  as_tibble

data_for_plot <- rbind(
  year.2012,
  year.2013,
  year.2014,
  year.2015,
  year.2016
) %>%
  mutate(Weight = get_weight(Day, Hour, Group)) %>%
  gather(
    HSV_Bin,
    HSV_H,
    -Index,
    -Group, 
    -Weight,
    -Dataset, 
    -Camera_ID, 
    -Year, 
    -Day, 
    -Hour, 
    -Minute, 
    -Metric_Type, 
    -Considered_Pixels
    ) %>%
  mutate(HSV_Bin = as.integer(HSV_Bin)) %>%
  group_by(Year, Group) %>% 
  filter(sum(Weight) / 360 == 1) %>%
  ungroup %>%
  mutate(HSV_H = Weight * HSV_H) %>%
  group_by(Year, Group, HSV_Bin) %>%
  summarize(
    HSV_H = as.integer(sum(HSV_H))
  ) %>%
  ungroup %>%
  mutate(Color.Code.H = hex(HSV(HSV_Bin, 1, 1))) %>%
  rename(Bin = HSV_Bin) %>%
  rename(Bin_Value = HSV_H) %>%
  gather(Style, Color, -Group, -Year, -Bin, -Bin_Value) %>%
  mutate(Style = gsub('Color.Code.', '', Style)) %>%
  mutate(Key = paste(Year, Group, Bin, Style, sep='_')) %>%
  mutate(Key = factor(Key, levels=Key)) %>%
  arrange(Style, Year, Group, Bin) %>%
  # Calculate the cumsums
  group_by(Style, Year, Group) %>%
  arrange(Bin) %>%
  filter(Bin_Value != 0) %>%
  mutate(
    Y.min = cumsum(Bin_Value) - Bin_Value,
    Y.max = cumsum(Bin_Value)
  ) %>%
  ungroup %>%
  arrange(Style, Year, Group, Bin)

palette <- data_for_plot %>% pull(Color)
names(palette) <- data_for_plot %>% pull(Key)

p <- data_for_plot %>%
  ggplot() +
    scale_fill_manual(values=palette) +
    geom_rect(
      aes(xmin=Group, xmax=Group+1, ymin=Y.min, ymax=Y.max, fill=Key)
    ) +
    get_theme(base_size = 12) +
    scale_x_continuous(
      name = 'DOY',
      breaks = c(0, 50, 100, 150, 200, 250, 300, 350)
    ) +
    facet_grid(Year ~ Style)

ggsave('mtk-2016-multiday-manyyears.pdf', plot=p, width=8, height=8)
#+END_SRC
*** Figure 20 (tky-2011-weighted-hsv-Q)
#+BEGIN_SRC R :tangle section-5/tky-2011-weighted-hsv-Q.R
#!/usr/bin/Rscript
library(tidyverse)
library(colorspace)
library(cowplot)

get_col_types <- function() {
  cols(
    Dataset = col_character(),
    Camera_ID = col_character(),
    Year = col_integer(),
    Day = col_integer(),
    Hour = col_integer(),
    Minute = col_integer(),
    Metric_Type = col_character(),
    Considered_Pixels = col_integer(),
    HSV_Bin = col_integer(),
    HSV_H = col_double(),
    HSV_SMean = col_double(),
    HSV_VMean = col_double(),
    HSV_SMode = col_double(),
    HSV_VMode = col_double(),
    Gcc_Bin = col_integer(),
    Gcc_Value = col_double(),
    Gcc_Mean_R = col_double(),
    Gcc_Mean_G = col_double(),
    Gcc_Mean_B = col_double()
  )
}

get_theme <- function(base_size = 14) {
  theme_bw(base_size = base_size) +
  theme(
    plot.margin = unit(c(0,0,0,0), "cm"),
    legend.spacing = unit(0, "mm"),
    panel.grid = element_blank(),
    legend.position = "none",
    legend.justification = "left",
    legend.box.spacing = unit(0, "pt"),
    legend.box.margin = margin(0,0,0,0),
    legend.title = element_blank(),
    axis.title.y = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )
}

df.weights <- tibble(
  Hour = c(7, 9, 10, 12, 13, 15, 16),
  Weight = c(0.05, 0.075, 0.075, 0.3, 0.3, 0.15, 0.05)
)

relevant_hours <- df.weights %>% filter(Weight != 0) %>% pull(Hour)

data <- read_csv(
  '../../data/tky.csv.gz',
  col_types = get_col_types()
) %>%
  filter(Camera_ID == 'y18_d') %>%
  filter(Year >= 2006) %>%
  filter(Hour %in% relevant_hours) %>%
  group_by(Year, Day, Hour, HSV_Bin, Gcc_Bin) %>%
  slice(1) %>%
  ungroup %>%
  left_join(df.weights, by=c('Hour'))

full_days <- data  %>%
  group_by(Year, Day) %>%
  summarize(
    imagesCount = length(Hour %>% unique)
  ) %>%
  ungroup %>%
  filter(imagesCount == 7)

data2 <- full_days %>%
  left_join(data, by=c('Year', 'Day')) %>%
  mutate(
    HSV_H = Weight * HSV_H,
    HSV_SMean = Weight * HSV_SMean,
    HSV_VMean = Weight * HSV_VMean,
    HSV_SMode = Weight * HSV_SMode,
    HSV_VMode = Weight * HSV_VMode,
    Gcc_Value = Weight * Gcc_Value,
    Gcc_Mean_R = Weight * Gcc_Mean_R,
    Gcc_Mean_G = Weight * Gcc_Mean_G,
    Gcc_Mean_B = Weight * Gcc_Mean_B
  ) %>%
  group_by(Year, Day, HSV_Bin, Gcc_Bin) %>%
  summarize(
    HSV_H = as.integer(sum(HSV_H)),
    HSV_SMean = sum(HSV_SMean, na.rm = TRUE),
    HSV_VMean = sum(HSV_VMean, na.rm = TRUE),
    HSV_SMode = sum(HSV_SMode, na.rm = TRUE),
    HSV_VMode = sum(HSV_VMode, na.rm = TRUE),
    Gcc_Value = as.integer(sum(Gcc_Value)),
    Gcc_Mean_R = sum(Gcc_Mean_R, na.rm = TRUE),
    Gcc_Mean_G = sum(Gcc_Mean_G, na.rm = TRUE),
    Gcc_Mean_B = sum(Gcc_Mean_B, na.rm = TRUE)
  ) %>%
  ungroup %>%
  mutate(
    Metric_Type = case_when(
      HSV_Bin == -1 ~ 'Gcc',
      Gcc_Bin == -1 ~ 'HSV'
    )
  )

hourly_histograms <- data %>%
  select(
    Year, Day, Hour, Metric_Type, 
    HSV_Bin, HSV_H, Gcc_Bin, Gcc_Value,
    -Weight
  ) %>%
  mutate(
    Bin = case_when(
      Metric_Type == 'Gcc' ~ Gcc_Bin,
      Metric_Type == 'HSV' ~ HSV_Bin
    ),
    Bin_Value = case_when(
      Metric_Type == 'Gcc' ~ Gcc_Value,
      Metric_Type == 'HSV' ~ HSV_H
    )
  ) %>%
  select(-HSV_Bin, -HSV_H, -Gcc_Bin, -Gcc_Value)

weighted_histogram <- data2 %>%
  select(Year, Day, Metric_Type, HSV_Bin, HSV_H, Gcc_Bin, Gcc_Value) %>%
  mutate(
    Bin = case_when(
      Metric_Type == 'Gcc' ~ Gcc_Bin,
      Metric_Type == 'HSV' ~ HSV_Bin
    ),
    Bin_Value = case_when(
      Metric_Type == 'Gcc' ~ Gcc_Value,
      Metric_Type == 'HSV' ~ HSV_H
    )
  ) %>%
  select(-HSV_Bin, -HSV_H, -Gcc_Bin, -Gcc_Value)


a <- hourly_histograms %>%
  select(Year, Day, Hour, Metric_Type, Bin, Bin_Value)
b <- weighted_histogram %>%
  select(Year, Day, Metric_Type, Bin, Bin_Value)

a <- a %>% filter(Day %in% b$Day)
b <- b %>% filter(Day %in% a$Day)

df.EMD <- a %>%
  left_join(b, by=c('Year', 'Day', 'Metric_Type', 'Bin')) %>%
  rename(
    P = Bin_Value.x,
    Q = Bin_Value.y
  ) %>%
  group_by(Year, Day, Hour, Metric_Type) %>%
  mutate(`P_i-Q_i` = lag(lead(P-Q))) %>%
  mutate(`EMD_i` = ifelse(is.na(`P_i-Q_i`), 0, `P_i-Q_i`)) %>%
  mutate(`EMD_i` = cumsum(`EMD_i`)) %>%
  summarize(Distance = sum(abs(`EMD_i`))) %>%
  ungroup %>%
  arrange(Year, Day, Metric_Type)

df.EMD.weighted <- df.EMD %>%
  left_join(df.weights, by=c('Hour')) %>%
  mutate(Weighted_Distance = Distance * Weight) %>%
  group_by(Year, Day, Metric_Type) %>%
  summarize(Q = sum(Weighted_Distance))

uncertainty_by_style <- df.EMD.weighted %>%
  mutate(
    Q = case_when(
      Metric_Type == 'Gcc' ~ Q/100,
      Metric_Type == 'HSV' ~ Q/360
    )
  )

hsv_cpm_for_plot <- data2 %>% 
  filter(Year == 2011) %>%
  filter(Metric_Type == 'HSV') %>%
    # Compute the color codes
  mutate(
    Color.Code.H = hex(HSV(HSV_Bin, 1, 1)),
    Color.Code.Mean = hex(HSV(HSV_Bin, HSV_SMean, HSV_VMean)),
    Color.Code.Mode = hex(HSV(HSV_Bin, HSV_SMode, HSV_VMode)),
    Color.Code.Gcc = hex(RGB(Gcc_Mean_R, Gcc_Mean_G, Gcc_Mean_B))
  ) %>% 
  select(
    -HSV_SMean, -HSV_VMean,
    -HSV_SMode, -HSV_VMode,
    -Gcc_Mean_R, -Gcc_Mean_G, -Gcc_Mean_B
  ) %>%
  # Extract the bin and bin value information
  mutate(
    Bin = case_when(
      Metric_Type == 'HSV' ~ HSV_Bin,
      Metric_Type == 'Gcc' ~ Gcc_Bin
    ),
    Bin_Value = as.integer(case_when(
      Metric_Type == 'HSV' ~ HSV_H,
      Metric_Type == 'Gcc' ~ Gcc_Value
    ))
  ) %>%
  select(-HSV_Bin, -HSV_H, -Gcc_Bin, -Gcc_Value) %>%
  select(Year, Day, Metric_Type, Bin, Bin_Value, everything()) %>%
  # Make it tidy
  gather(Style, Color, -Year, -Day, -Metric_Type, -Bin, -Bin_Value) %>%
  mutate(Style = gsub('Color.Code.', '', Style)) %>%
  # Remove useless combinations
  filter(!(Metric_Type == 'Gcc' & Style %in% c('H', 'Mean', 'Mode'))) %>%
  filter(!(Metric_Type == 'HSV' & Style == 'Gcc')) %>%
  # Create the key
  mutate(Key = paste(Year, Day, Bin, Style, sep='_')) %>%
  mutate(Key = factor(Key, levels=Key)) %>%
  # Sort the bins
  arrange(Style, Year, Day, Bin) %>%
  # Calculate the cumsums
  group_by(Style, Year, Day) %>%
  arrange(Bin) %>%
  filter(Bin_Value != 0) %>%
  mutate(
    Y.min = cumsum(Bin_Value) - Bin_Value,
    Y.max = cumsum(Bin_Value)
  ) %>%
  ungroup %>%
  arrange(Style, Year, Day, Bin)

palette <- hsv_cpm_for_plot %>% pull(Color)
names(palette) <- hsv_cpm_for_plot %>% pull(Key)

hsv_cpm_plot <- hsv_cpm_for_plot %>%
  filter(Style == 'H') %>%
  ggplot() +
    scale_fill_manual(values=palette) +
    geom_rect(
      aes(xmin=Day, xmax=Day+1, ymin=Y.min, ymax=Y.max, fill=Key)
    ) +
    get_theme(base_size = 12) +
    scale_x_continuous(
      name = 'DOY (2011)',
      breaks = c(0, 50, 100, 150, 200, 250, 300, 350)
    )

quality_plot <- uncertainty_by_style %>%
  filter(Year == 2011) %>%
  filter(Metric_Type == 'HSV') %>%
  ungroup %>%
  mutate(Q = Q/max(Q)) %>%
  ggplot(aes(x = Day, y = Q)) +
    geom_col(width = 1) +
    theme_bw() +
    theme(
      plot.margin = unit(c(1,0,1,0), 'mm'),
      panel.grid = element_blank(),
      legend.position = 'none',
      legend.spacing = unit(0, 'mm'),
      legend.box.spacing = unit(0, 'pt'),
      legend.box.margin = margin(0,0,0,0),
      axis.title.x = element_blank(),
      axis.text.x = element_blank(),
      axis.ticks.x = element_blank(),
      axis.title.y = element_text(size=10),
    ) +
    ylab("Uncert.\nLevel")

p <- plot_grid(
  quality_plot,
  hsv_cpm_plot, 
  nrow=2,
  ncol = 1,
  align='vh',
  rel_heights=c(2, 5)
)

ggsave('tky-2011-weighted-hsv-Q.pdf', plot=p, width=8, height=4)
#+END_SRC
*** Figure 21 (tky-2011-145-hourly)
#+BEGIN_SRC R :tangle section-5/tky-2011-145-hourly.R
#!/usr/bin/Rscript
library(tidyverse)
library(colorspace)

get_col_types <- function() {
  cols(
    Dataset = col_character(),
    Camera_ID = col_character(),
    Year = col_integer(),
    Day = col_integer(),
    Hour = col_integer(),
    Minute = col_integer(),
    Metric_Type = col_character(),
    Considered_Pixels = col_integer(),
    HSV_Bin = col_integer(),
    HSV_H = col_double(),
    HSV_SMean = col_double(),
    HSV_VMean = col_double(),
    HSV_SMode = col_double(),
    HSV_VMode = col_double(),
    Gcc_Bin = col_integer(),
    Gcc_Value = col_double(),
    Gcc_Mean_R = col_double(),
    Gcc_Mean_G = col_double(),
    Gcc_Mean_B = col_double()
  )
}

get_theme <- function(base_size = 14) {
  theme_bw(base_size = base_size) +
  theme(
    plot.margin = unit(c(0,0,0,0), "cm"),
    legend.spacing = unit(0, "mm"),
    panel.grid = element_blank(),
    legend.position = "none",
    legend.justification = "left",
    legend.box.spacing = unit(0, "pt"),
    legend.box.margin = margin(0,0,0,0),
    legend.title = element_blank(),
    axis.title.y = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )
}

df.weights <- tibble(
  Hour = c(7, 9, 10, 12, 13, 15, 16),
  Weight = c(0.05, 0.075, 0.075, 0.3, 0.3, 0.15, 0.05)
)

relevant_hours <- df.weights %>% filter(Weight != 0) %>% pull(Hour)

data <- read_csv(
  '../../data/tky.csv.gz',
  col_types = get_col_types()
) %>%
  filter(Camera_ID == 'y18_d') %>%
  filter(Year >= 2006) %>%
  filter(Hour %in% relevant_hours) %>%
  group_by(Year, Day, Hour, HSV_Bin, Gcc_Bin) %>%
  slice(1) %>%
  ungroup %>%
  filter(Year == 2011) %>%
  filter(Day == 145) %>%
  filter(Metric_Type == 'HSV') %>%
  select(-contains('Gcc')) %>%
  select(-Dataset, -Camera_ID, -Year, -Metric_Type) %>%
  # Process data
  mutate(
    Color.Code.H = hex(HSV(HSV_Bin, 1, 1)),
    Color.Code.Mean = hex(HSV(HSV_Bin, HSV_SMean, HSV_VMean)),
    Color.Code.Mode = hex(HSV(HSV_Bin, HSV_SMode, HSV_VMode))
  ) %>%
  # Make it tidy
  gather(Variable, Value, -contains('HSV'), -Day, -Hour, -Considered_Pixels) %>%
  # Add style and key
  mutate(Style = gsub('Color.Code.', '', Variable)) %>%
  mutate(Key = paste(Style, Hour, Day, HSV_Bin, sep='_')) %>%
  mutate(Key = factor(Key, levels=Key)) %>%
  # Cleanup
  select(-Considered_Pixels, -contains('Mean'), -contains('Mode'), -Variable) %>%
  arrange(Style, Hour, Day, HSV_Bin) %>%
  # Prepare for plot, calculate cumsums
  rename(Bin = HSV_Bin) %>%
  rename(Color = Value) %>%
  group_by(Style, Hour, Day) %>%
  arrange(Bin) %>%
  filter(HSV_H != 0) %>%
  mutate(
    Y.min = cumsum(HSV_H) - HSV_H,
    Y.max = cumsum(HSV_H)
  ) %>%
  ungroup %>%
  arrange(Style, Hour, Day, Bin)

palette <- data %>% pull(Color)
names(palette) <- data %>% pull(Key)

p <- data %>%
  filter(Style == 'H') %>%
  mutate(Fct = case_when(
    Hour == 7 ~ 'Hour 07',
    Hour == 9 ~ 'Hour 09',
    TRUE ~ paste0('Hour ', Hour)
  )) %>%
  ggplot() +
    scale_fill_manual(values=palette) +
    geom_rect(
      aes(xmin=Day, xmax=Day+1, ymin=Y.min, ymax=Y.max, fill=Key)
    ) +
    get_theme(base_size = 18) +
    theme(
      strip.text.y = element_blank(),
      panel.spacing = unit(0, 'mm'),
      axis.text.x = element_blank(),
      axis.ticks.x = element_blank()
    ) +
    xlab('Day 145') +
    facet_grid(Style ~ Fct)

ggsave('tky-2011-145-hourly.pdf', plot=p, width=6, height=6)
#+END_SRC
*** Figure 22 (tky-2011-324-hourly)
#+BEGIN_SRC R :tangle section-5/tky-2011-324-hourly.R
#!/usr/bin/Rscript
library(tidyverse)
library(colorspace)

get_col_types <- function() {
  cols(
    Dataset = col_character(),
    Camera_ID = col_character(),
    Year = col_integer(),
    Day = col_integer(),
    Hour = col_integer(),
    Minute = col_integer(),
    Metric_Type = col_character(),
    Considered_Pixels = col_integer(),
    HSV_Bin = col_integer(),
    HSV_H = col_double(),
    HSV_SMean = col_double(),
    HSV_VMean = col_double(),
    HSV_SMode = col_double(),
    HSV_VMode = col_double(),
    Gcc_Bin = col_integer(),
    Gcc_Value = col_double(),
    Gcc_Mean_R = col_double(),
    Gcc_Mean_G = col_double(),
    Gcc_Mean_B = col_double()
  )
}

get_theme <- function(base_size = 14) {
  theme_bw(base_size = base_size) +
  theme(
    plot.margin = unit(c(0,0,0,0), "cm"),
    legend.spacing = unit(0, "mm"),
    panel.grid = element_blank(),
    legend.position = "none",
    legend.justification = "left",
    legend.box.spacing = unit(0, "pt"),
    legend.box.margin = margin(0,0,0,0),
    legend.title = element_blank(),
    axis.title.y = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )
}

df.weights <- tibble(
  Hour = c(7, 9, 10, 12, 13, 15, 16),
  Weight = c(0.05, 0.075, 0.075, 0.3, 0.3, 0.15, 0.05)
)

relevant_hours <- df.weights %>% filter(Weight != 0) %>% pull(Hour)

data <- read_csv(
  '../../data/tky.csv.gz',
  col_types = get_col_types()
) %>%
  filter(Camera_ID == 'y18_d') %>%
  filter(Year >= 2006) %>%
  filter(Hour %in% relevant_hours) %>%
  group_by(Year, Day, Hour, HSV_Bin, Gcc_Bin) %>%
  slice(1) %>%
  ungroup %>%
  filter(Year == 2011) %>%
  filter(Day == 324) %>%
  filter(Metric_Type == 'HSV') %>%
  select(-contains('Gcc')) %>%
  select(-Dataset, -Camera_ID, -Year, -Metric_Type) %>%
  # Process data
  mutate(
    Color.Code.H = hex(HSV(HSV_Bin, 1, 1)),
    Color.Code.Mean = hex(HSV(HSV_Bin, HSV_SMean, HSV_VMean)),
    Color.Code.Mode = hex(HSV(HSV_Bin, HSV_SMode, HSV_VMode))
  ) %>%
  # Make it tidy
  gather(Variable, Value, -contains('HSV'), -Day, -Hour, -Considered_Pixels) %>%
  # Add style and key
  mutate(Style = gsub('Color.Code.', '', Variable)) %>%
  mutate(Key = paste(Style, Hour, Day, HSV_Bin, sep='_')) %>%
  mutate(Key = factor(Key, levels=Key)) %>%
  # Cleanup
  select(-Considered_Pixels, -contains('Mean'), -contains('Mode'), -Variable) %>%
  arrange(Style, Hour, Day, HSV_Bin) %>%
  # Prepare for plot, calculate cumsums
  rename(Bin = HSV_Bin) %>%
  rename(Color = Value) %>%
  group_by(Style, Hour, Day) %>%
  arrange(Bin) %>%
  filter(HSV_H != 0) %>%
  mutate(
    Y.min = cumsum(HSV_H) - HSV_H,
    Y.max = cumsum(HSV_H)
  ) %>%
  ungroup %>%
  arrange(Style, Hour, Day, Bin)

palette <- data %>% pull(Color)
names(palette) <- data %>% pull(Key)

p <- data %>%
  filter(Style == 'H') %>%
  mutate(Fct = case_when(
    Hour == 7 ~ 'Hour 07',
    Hour == 9 ~ 'Hour 09',
    TRUE ~ paste0('Hour ', Hour)
  )) %>%
  ggplot() +
    scale_fill_manual(values=palette) +
    geom_rect(
      aes(xmin=Day, xmax=Day+1, ymin=Y.min, ymax=Y.max, fill=Key)
    ) +
    get_theme(base_size = 18) +
    theme(
      strip.text.y = element_blank(),
      panel.spacing = unit(0, 'mm'),
      axis.text.x = element_blank(),
      axis.ticks.x = element_blank()
    ) +
    xlab('Day 324') +
    facet_grid(Style ~ Fct)

ggsave('tky-2011-324-hourly.pdf', plot=p, width=6, height=6)
#+END_SRC
*** Figure 23 (tky-2011-weighted-gcc-Q)
#+BEGIN_SRC R :tangle section-5/tky-2011-weighted-gcc-Q.R
#!/usr/bin/Rscript
library(tidyverse)
library(colorspace)
library(cowplot)

get_col_types <- function() {
  cols(
    Dataset = col_character(),
    Camera_ID = col_character(),
    Year = col_integer(),
    Day = col_integer(),
    Hour = col_integer(),
    Minute = col_integer(),
    Metric_Type = col_character(),
    Considered_Pixels = col_integer(),
    HSV_Bin = col_integer(),
    HSV_H = col_double(),
    HSV_SMean = col_double(),
    HSV_VMean = col_double(),
    HSV_SMode = col_double(),
    HSV_VMode = col_double(),
    Gcc_Bin = col_integer(),
    Gcc_Value = col_double(),
    Gcc_Mean_R = col_double(),
    Gcc_Mean_G = col_double(),
    Gcc_Mean_B = col_double()
  )
}

get_theme <- function(base_size = 14) {
  theme_bw(base_size = base_size) +
  theme(
    plot.margin = unit(c(0,0,0,0), "cm"),
    legend.spacing = unit(0, "mm"),
    panel.grid = element_blank(),
    legend.position = "none",
    legend.justification = "left",
    legend.box.spacing = unit(0, "pt"),
    legend.box.margin = margin(0,0,0,0),
    legend.title = element_blank(),
    axis.title.y = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )
}

df.weights <- tibble(
  Hour = c(7, 9, 10, 12, 13, 15, 16),
  Weight = c(0.05, 0.075, 0.075, 0.3, 0.3, 0.15, 0.05)
)

relevant_hours <- df.weights %>% filter(Weight != 0) %>% pull(Hour)

data <- read_csv(
  '../../data/tky.csv.gz',
  col_types = get_col_types()
) %>%
  filter(Camera_ID == 'y18_d') %>%
  filter(Year >= 2006) %>%
  filter(Hour %in% relevant_hours) %>%
  group_by(Year, Day, Hour, HSV_Bin, Gcc_Bin) %>%
  slice(1) %>%
  ungroup %>%
  left_join(df.weights, by=c('Hour'))

full_days <- data  %>%
  group_by(Year, Day) %>%
  summarize(
    imagesCount = length(Hour %>% unique)
  ) %>%
  ungroup %>%
  filter(imagesCount == 7)

data2 <- full_days %>%
  left_join(data, by=c('Year', 'Day')) %>%
  mutate(
    HSV_H = Weight * HSV_H,
    HSV_SMean = Weight * HSV_SMean,
    HSV_VMean = Weight * HSV_VMean,
    HSV_SMode = Weight * HSV_SMode,
    HSV_VMode = Weight * HSV_VMode,
    Gcc_Value = Weight * Gcc_Value,
    Gcc_Mean_R = Weight * Gcc_Mean_R,
    Gcc_Mean_G = Weight * Gcc_Mean_G,
    Gcc_Mean_B = Weight * Gcc_Mean_B
  ) %>%
  group_by(Year, Day, HSV_Bin, Gcc_Bin) %>%
  summarize(
    HSV_H = as.integer(sum(HSV_H)),
    HSV_SMean = sum(HSV_SMean, na.rm = TRUE),
    HSV_VMean = sum(HSV_VMean, na.rm = TRUE),
    HSV_SMode = sum(HSV_SMode, na.rm = TRUE),
    HSV_VMode = sum(HSV_VMode, na.rm = TRUE),
    Gcc_Value = as.integer(sum(Gcc_Value)),
    Gcc_Mean_R = sum(Gcc_Mean_R, na.rm = TRUE),
    Gcc_Mean_G = sum(Gcc_Mean_G, na.rm = TRUE),
    Gcc_Mean_B = sum(Gcc_Mean_B, na.rm = TRUE)
  ) %>%
  ungroup %>%
  mutate(
    Metric_Type = case_when(
      HSV_Bin == -1 ~ 'Gcc',
      Gcc_Bin == -1 ~ 'HSV'
    )
  )

hourly_histograms <- data %>%
  select(
    Year, Day, Hour, Metric_Type, 
    HSV_Bin, HSV_H, Gcc_Bin, Gcc_Value,
    -Weight
  ) %>%
  mutate(
    Bin = case_when(
      Metric_Type == 'Gcc' ~ Gcc_Bin,
      Metric_Type == 'HSV' ~ HSV_Bin
    ),
    Bin_Value = case_when(
      Metric_Type == 'Gcc' ~ Gcc_Value,
      Metric_Type == 'HSV' ~ HSV_H
    )
  ) %>%
  select(-HSV_Bin, -HSV_H, -Gcc_Bin, -Gcc_Value)

weighted_histogram <- data2 %>%
  select(Year, Day, Metric_Type, HSV_Bin, HSV_H, Gcc_Bin, Gcc_Value) %>%
  mutate(
    Bin = case_when(
      Metric_Type == 'Gcc' ~ Gcc_Bin,
      Metric_Type == 'HSV' ~ HSV_Bin
    ),
    Bin_Value = case_when(
      Metric_Type == 'Gcc' ~ Gcc_Value,
      Metric_Type == 'HSV' ~ HSV_H
    )
  ) %>%
  select(-HSV_Bin, -HSV_H, -Gcc_Bin, -Gcc_Value)


a <- hourly_histograms %>%
  select(Year, Day, Hour, Metric_Type, Bin, Bin_Value)
b <- weighted_histogram %>%
  select(Year, Day, Metric_Type, Bin, Bin_Value)

a <- a %>% filter(Day %in% b$Day)
b <- b %>% filter(Day %in% a$Day)

df.EMD <- a %>%
  left_join(b, by=c('Year', 'Day', 'Metric_Type', 'Bin')) %>%
  rename(
    P = Bin_Value.x,
    Q = Bin_Value.y
  ) %>%
  group_by(Year, Day, Hour, Metric_Type) %>%
  mutate(`P_i-Q_i` = lag(lead(P-Q))) %>%
  mutate(`EMD_i` = ifelse(is.na(`P_i-Q_i`), 0, `P_i-Q_i`)) %>%
  mutate(`EMD_i` = cumsum(`EMD_i`)) %>%
  summarize(Distance = sum(abs(`EMD_i`))) %>%
  ungroup %>%
  arrange(Year, Day, Metric_Type)

df.EMD.weighted <- df.EMD %>%
  left_join(df.weights, by=c('Hour')) %>%
  mutate(Weighted_Distance = Distance * Weight) %>%
  group_by(Year, Day, Metric_Type) %>%
  summarize(Q = sum(Weighted_Distance))

uncertainty_by_style <- df.EMD.weighted %>%
  mutate(
    Q = case_when(
      Metric_Type == 'Gcc' ~ Q/100,
      Metric_Type == 'HSV' ~ Q/360
    )
  )

gcc_cpm_for_plot <- data2 %>% 
  filter(Year == 2011) %>%
  filter(Metric_Type == 'Gcc') %>%
    # Compute the color codes
  mutate(
    Color.Code.H = hex(HSV(HSV_Bin, 1, 1)),
    Color.Code.Mean = hex(HSV(HSV_Bin, HSV_SMean, HSV_VMean)),
    Color.Code.Mode = hex(HSV(HSV_Bin, HSV_SMode, HSV_VMode)),
    Color.Code.Gcc = hex(RGB(Gcc_Mean_R, Gcc_Mean_G, Gcc_Mean_B))
  ) %>% 
  select(
    -HSV_SMean, -HSV_VMean,
    -HSV_SMode, -HSV_VMode,
    -Gcc_Mean_R, -Gcc_Mean_G, -Gcc_Mean_B
  ) %>%
  # Extract the bin and bin value information
  mutate(
    Bin = case_when(
      Metric_Type == 'HSV' ~ HSV_Bin,
      Metric_Type == 'Gcc' ~ Gcc_Bin
    ),
    Bin_Value = as.integer(case_when(
      Metric_Type == 'HSV' ~ HSV_H,
      Metric_Type == 'Gcc' ~ Gcc_Value
    ))
  ) %>%
  select(-HSV_Bin, -HSV_H, -Gcc_Bin, -Gcc_Value) %>%
  select(Year, Day, Metric_Type, Bin, Bin_Value, everything()) %>%
  # Make it tidy
  gather(Style, Color, -Year, -Day, -Metric_Type, -Bin, -Bin_Value) %>%
  mutate(Style = gsub('Color.Code.', '', Style)) %>%
  # Remove useless combinations
  filter(!(Metric_Type == 'Gcc' & Style %in% c('H', 'Mean', 'Mode'))) %>%
  filter(!(Metric_Type == 'HSV' & Style == 'Gcc')) %>%
  # Create the key
  mutate(Key = paste(Year, Day, Bin, Style, sep='_')) %>%
  mutate(Key = factor(Key, levels=Key)) %>%
  # Sort the bins
  arrange(Style, Year, Day, Bin) %>%
  # Calculate the cumsums
  group_by(Style, Year, Day) %>%
  arrange(Bin) %>%
  filter(Bin_Value != 0) %>%
  mutate(
    Y.min = cumsum(Bin_Value) - Bin_Value,
    Y.max = cumsum(Bin_Value)
  ) %>%
  ungroup %>%
  arrange(Style, Year, Day, Bin)

palette <- gcc_cpm_for_plot %>% pull(Color)
names(palette) <- gcc_cpm_for_plot %>% pull(Key)

gcc_cpm_plot <- gcc_cpm_for_plot %>%
  filter(Style == 'Gcc') %>%
  ggplot() +
    scale_fill_manual(values=palette) +
    geom_rect(
      aes(xmin=Day, xmax=Day+1, ymin=Y.min, ymax=Y.max, fill=Key)
    ) +
    get_theme(base_size = 12) +
    scale_x_continuous(
      name = 'DOY (2011)',
      breaks = c(0, 50, 100, 150, 200, 250, 300, 350)
    )

quality_plot <- uncertainty_by_style %>%
  filter(Year == 2011) %>%
  filter(Metric_Type == 'Gcc') %>%
  ungroup %>%
  mutate(Q = Q/max(Q)) %>%
  ggplot(aes(x = Day, y = Q)) +
    geom_col(width = 1) +
    theme_bw() +
    theme(
      plot.margin = unit(c(1,0,1,0), 'mm'),
      panel.grid = element_blank(),
      legend.position = 'none',
      legend.spacing = unit(0, 'mm'),
      legend.box.spacing = unit(0, 'pt'),
      legend.box.margin = margin(0,0,0,0),
      axis.title.x = element_blank(),
      axis.text.x = element_blank(),
      axis.ticks.x = element_blank(),
      axis.title.y = element_text(size=10),
    ) +
    ylab("Uncert.\nLevel")

p <- plot_grid(
  quality_plot,
  gcc_cpm_plot, 
  nrow=2,
  ncol = 1,
  align='vh',
  rel_heights=c(2, 5)
)

ggsave('tky-2011-weighted-gcc-Q.pdf', plot=p, width=8, height=4)
#+END_SRC
*** Figure 24 (tky-100-to-175-gcc-distribution)
#+BEGIN_SRC R :tangle section-5/tky-100-to-175-gcc-distribution.R
#!/usr/bin/Rscript
library(tidyverse)
library(colorspace)
library(cowplot)
library(latex2exp)

get_col_types <- function() {
  cols(
    Dataset = col_character(),
    Camera_ID = col_character(),
    Year = col_integer(),
    Day = col_integer(),
    Hour = col_integer(),
    Minute = col_integer(),
    Metric_Type = col_character(),
    Considered_Pixels = col_integer(),
    HSV_Bin = col_integer(),
    HSV_H = col_double(),
    HSV_SMean = col_double(),
    HSV_VMean = col_double(),
    HSV_SMode = col_double(),
    HSV_VMode = col_double(),
    Gcc_Bin = col_integer(),
    Gcc_Value = col_double(),
    Gcc_Mean_R = col_double(),
    Gcc_Mean_G = col_double(),
    Gcc_Mean_B = col_double()
  )
}

get_theme <- function(base_size = 14) {
  theme_bw(base_size = base_size) +
  theme(
    plot.margin = unit(c(0,0,0,0), "cm"),
    legend.spacing = unit(0, "mm"),
    panel.grid = element_blank(),
    legend.position = "none",
    legend.justification = "left",
    legend.box.spacing = unit(0, "pt"),
    legend.box.margin = margin(0,0,0,0),
    legend.title = element_blank(),
    axis.title.y = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )
}

df.weights <- tibble(
  Hour = c(7, 9, 10, 12, 13, 15, 16),
  Weight = c(0.05, 0.075, 0.075, 0.3, 0.3, 0.15, 0.05)
)

relevant_hours <- df.weights %>% filter(Weight != 0) %>% pull(Hour)

data <- read_csv(
  '../../data/tky.csv.gz',
  col_types = get_col_types()
) %>%
  filter(Camera_ID == 'y18_d') %>%
  filter(Year >= 2006) %>%
  filter(Hour %in% relevant_hours) %>%
  group_by(Year, Day, Hour, HSV_Bin, Gcc_Bin) %>%
  slice(1) %>%
  ungroup %>%
  left_join(df.weights, by=c('Hour'))

full_days <- data  %>%
  group_by(Year, Day) %>%
  summarize(
    imagesCount = length(Hour %>% unique)
  ) %>%
  ungroup %>%
  filter(imagesCount == 7)

data2 <- full_days %>%
  left_join(data, by=c('Year', 'Day')) %>%
  mutate(
    HSV_H = Weight * HSV_H,
    HSV_SMean = Weight * HSV_SMean,
    HSV_VMean = Weight * HSV_VMean,
    HSV_SMode = Weight * HSV_SMode,
    HSV_VMode = Weight * HSV_VMode,
    Gcc_Value = Weight * Gcc_Value,
    Gcc_Mean_R = Weight * Gcc_Mean_R,
    Gcc_Mean_G = Weight * Gcc_Mean_G,
    Gcc_Mean_B = Weight * Gcc_Mean_B
  ) %>%
  group_by(Year, Day, HSV_Bin, Gcc_Bin) %>%
  summarize(
    HSV_H = as.integer(sum(HSV_H)),
    HSV_SMean = sum(HSV_SMean, na.rm = TRUE),
    HSV_VMean = sum(HSV_VMean, na.rm = TRUE),
    HSV_SMode = sum(HSV_SMode, na.rm = TRUE),
    HSV_VMode = sum(HSV_VMode, na.rm = TRUE),
    Gcc_Value = as.integer(sum(Gcc_Value)),
    Gcc_Mean_R = sum(Gcc_Mean_R, na.rm = TRUE),
    Gcc_Mean_G = sum(Gcc_Mean_G, na.rm = TRUE),
    Gcc_Mean_B = sum(Gcc_Mean_B, na.rm = TRUE)
  ) %>%
  ungroup %>%
  mutate(
    Metric_Type = case_when(
      HSV_Bin == -1 ~ 'Gcc',
      Gcc_Bin == -1 ~ 'HSV'
    )
  )

p <- data %>%
  filter(Year == 2011) %>%
  filter(Day %in% c(100, 125, 150, 175)) %>%
  filter(Metric_Type == 'Gcc') %>%
  select(-contains('HSV')) %>%
  filter(Gcc_Value != 0) %>%
  mutate(Day = paste0('Day ', Day)) %>%
  ggplot(aes(x = Gcc_Bin, y = Gcc_Value)) +
    geom_col(width=0.8) +
    theme_bw(base_size = 12) +
    theme(
      plot.margin = unit(c(0,0,0,0), "cm"),
      legend.spacing = unit(0, "mm"),
      panel.grid = element_blank(),
      legend.position = 'top',
      legend.justification = "left",
      legend.box.spacing = unit(0, "pt"),
      legend.box.margin = margin(0,0,0,0),
      #axis.title.y = element_blank(),
      axis.text.y = element_blank(),
      axis.ticks.y = element_blank()
    ) +
    xlim(0, 100) +
    facet_wrap(~ Day, ncol = 1, scales = 'free_y') +
    scale_x_continuous(name = TeX("$g_{cc}$ Bin"), breaks = seq(0, 100, 10)) +
    ylab('Normalized size of bins')


ggsave('tky-100-to-175-gcc-distribution.pdf', plot=p, width=6, height=3)
#+END_SRC
*** Figure 25 (tky-2011-162-gcc-hourly)
#+BEGIN_SRC R :tangle section-5/tky-2011-162-gcc-hourly.R
#!/usr/bin/Rscript
library(tidyverse)
library(colorspace)

get_col_types <- function() {
  cols(
    Dataset = col_character(),
    Camera_ID = col_character(),
    Year = col_integer(),
    Day = col_integer(),
    Hour = col_integer(),
    Minute = col_integer(),
    Metric_Type = col_character(),
    Considered_Pixels = col_integer(),
    HSV_Bin = col_integer(),
    HSV_H = col_double(),
    HSV_SMean = col_double(),
    HSV_VMean = col_double(),
    HSV_SMode = col_double(),
    HSV_VMode = col_double(),
    Gcc_Bin = col_integer(),
    Gcc_Value = col_double(),
    Gcc_Mean_R = col_double(),
    Gcc_Mean_G = col_double(),
    Gcc_Mean_B = col_double()
  )
}

get_theme <- function(base_size = 14) {
  theme_bw(base_size = base_size) +
  theme(
    plot.margin = unit(c(0,0,0,0), "cm"),
    legend.spacing = unit(0, "mm"),
    panel.grid = element_blank(),
    legend.position = "none",
    legend.justification = "left",
    legend.box.spacing = unit(0, "pt"),
    legend.box.margin = margin(0,0,0,0),
    legend.title = element_blank(),
    axis.title.y = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )
}

df.weights <- tibble(
  Hour = c(7, 9, 10, 12, 13, 15, 16),
  Weight = c(0.05, 0.075, 0.075, 0.3, 0.3, 0.15, 0.05)
)

relevant_hours <- df.weights %>% filter(Weight != 0) %>% pull(Hour)

data <- read_csv(
  '../../data/tky.csv.gz',
  col_types = get_col_types()
) %>%
  filter(Camera_ID == 'y18_d') %>%
  filter(Year == 2011) %>%
  filter(Hour %in% relevant_hours) %>%
  group_by(Year, Day, Hour, HSV_Bin, Gcc_Bin) %>%
  slice(1) %>%
  ungroup %>%
  filter(Day == 162) %>%
  filter(Metric_Type == 'Gcc') %>%
  select(-contains('HSV')) %>%
  select(-Dataset, -Camera_ID, -Year, -Metric_Type) %>%
  # Process data
  mutate(
    Color.Code.Gcc = hex(RGB(Gcc_Mean_R, Gcc_Mean_G, Gcc_Mean_B))
  ) %>%
  # Make it tidy
  gather(Variable, Value, -contains('Gcc_'), -Day, -Hour, -Minute, -Considered_Pixels) %>%
  # Add style and key
  mutate(Style = gsub('Color.Code.', '', Variable)) %>%
  mutate(Key = paste(Style, Hour, Day, Gcc_Bin, sep='_')) %>%
  mutate(Key = factor(Key, levels=Key)) %>%
  # Cleanup
  select(-Considered_Pixels, -contains('Mean'), -contains('Mode'), -Variable) %>%
  arrange(Style, Hour, Day, Gcc_Bin) %>%
  # Prepare for plot, calculate cumsums
  rename(Bin = Gcc_Bin) %>%
  rename(Color = Value) %>%
  group_by(Style, Hour, Day) %>%
  arrange(Bin) %>%
  filter(Gcc_Value != 0) %>%
  mutate(
    Y.min = cumsum(Gcc_Value) - Gcc_Value,
    Y.max = cumsum(Gcc_Value)
  ) %>%
  ungroup %>%
  arrange(Style, Hour, Day, Bin) %>%
  select(Style, Hour, Day, Bin, everything())

palette <- data %>% pull(Color)
names(palette) <- data %>% pull(Key)

p <- data %>%
  filter(Style == 'Gcc') %>%
  mutate(Fct = case_when(
    Hour == 7 ~ 'Hour 07',
    Hour == 9 ~ 'Hour 09',
    TRUE ~ paste0('Hour ', Hour)
  )) %>%
  ggplot() +
    scale_fill_manual(values=palette) +
    geom_rect(
      aes(xmin=Day, xmax=Day+1, ymin=Y.min, ymax=Y.max, fill=Key)
    ) +
    get_theme(base_size = 18) +
    theme(
      strip.text.y = element_blank(),
      panel.spacing = unit(0, 'mm'),
      axis.text.x = element_blank(),
      axis.ticks.x = element_blank()
    ) +
    xlab('Day 162') +
    facet_grid(Style ~ Fct)

ggsave('tky-2011-162-gcc-hourly.pdf', plot=p, width=6, height=6)
#+END_SRC
*** Figure 26 (performance-analysis)
#+BEGIN_SRC R :tangle section-5/performance-analysis.R
#!/usr/bin/Rscript
library(tidyverse)
library(colorspace)

data <- bind_rows(
  read_csv(
    '../../data/mtk-experiment.csv',
    col_types = cols(cores = col_integer(), exectime = col_double())
  ) %>%
  mutate(dataset = 'MTK'),
  
  read_csv(
    '../../data/tky-experiment.csv',
    col_types = cols(cores = col_integer(), exectime = col_double())
  ) %>%
  mutate(dataset = 'TKY'),

  read_csv(
    '../../data/ahs-experiment.csv',
    col_types = cols(cores = col_integer(), exectime = col_double())
  ) %>%
  mutate(dataset = 'AHS')
) %>%
  mutate(exectimeInSeconds = exectime/1000) %>%
  mutate(exectimeInMinutes = exectimeInSeconds/60) %>%
  group_by(cores, dataset) %>%
  summarize(
    avgMinutes = mean(exectimeInMinutes),
    errorMinutes = 3 * sd(exectimeInMinutes)/sqrt(n())
  ) %>%
  ungroup

p <- data %>%
  ggplot(aes(x = cores, y = avgMinutes, col = dataset)) +
    geom_line(alpha = 0.7) +
    geom_point() +
    geom_errorbar(aes(
      ymin = avgMinutes-errorMinutes,
      ymax = avgMinutes+errorMinutes
    ), width = 1.5, alpha = 0.8) +
    theme_bw(base_size = 12) +
    theme(
      plot.margin = unit(c(0,0,0,0), 'cm'),
      legend.position = c(0.9, 0.7),
      legend.background = element_rect(color = 'black', size = 0.2)
    ) +
    labs(
      x = 'Threads (count)',
      y = 'Mean execution time (min)',
      col = 'Dataset'
    ) +
    scale_x_continuous(breaks = unique(data$cores)) +
    scale_y_continuous(breaks = seq(0, 140, 20), limits = c(0, 140))

ggsave('performance-analysis.pdf', plot=p, width=8, height=2.5)
#+END_SRC
